#!/usr/bin/env bash
# This script is intended to be run as an autostart/restart helper.

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

function suggest_sysctl(){
cat << EOF
Anti-DDoS Kernel Settings (sysctl.conf) Suggestion

kernel.printk = 4 4 1 7
kernel.panic = 10
kernel.sysrq = 0
kernel.shmmax = 4294967296
kernel.shmall = 4194304
kernel.core_uses_pid = 1
kernel.msgmnb = 65536
kernel.msgmax = 65536
vm.swappiness = 20
vm.dirty_ratio = 80
vm.dirty_background_ratio = 5
fs.file-max = 2097152
net.core.netdev_max_backlog = 262144
net.core.rmem_default = 31457280
net.core.rmem_max = 67108864
net.core.wmem_default = 31457280
net.core.wmem_max = 67108864
net.core.somaxconn = 65535
net.core.optmem_max = 25165824
net.ipv4.neigh.default.gc_thresh1 = 4096
net.ipv4.neigh.default.gc_thresh2 = 8192
net.ipv4.neigh.default.gc_thresh3 = 16384
net.ipv4.neigh.default.gc_interval = 5
net.ipv4.neigh.default.gc_stale_time = 120
net.netfilter.nf_conntrack_max = 10000000
net.netfilter.nf_conntrack_tcp_loose = 0
net.netfilter.nf_conntrack_tcp_timeout_established = 1800
net.netfilter.nf_conntrack_tcp_timeout_close = 10
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 10
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 20
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 10
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.ip_no_pmtu_disc = 1
net.ipv4.route.flush = 1
net.ipv4.route.max_size = 8048576
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.tcp_congestion_control = htcp
net.ipv4.tcp_mem = 65536 131072 262144
net.ipv4.udp_mem = 65536 131072 262144
net.ipv4.tcp_rmem = 4096 87380 33554432
net.ipv4.udp_rmem_min = 16384
net.ipv4.tcp_wmem = 4096 87380 33554432
net.ipv4.udp_wmem_min = 16384
net.ipv4.tcp_max_tw_buckets = 1440000
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_max_orphans = 400000
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_max_syn_backlog = 16384
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_fack = 1
net.ipv4.tcp_ecn = 2
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_intvl = 60
net.ipv4.tcp_keepalive_probes = 10
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.ip_forward = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.all.rp_filter = 1
EOF
}

# Block Invalid Packets
function ipt_block_inv_pckts(){
    /sbin/iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP
}

# Block New Packets That Are Not SYN
function ipt_drop_not_syn_pckts(){
    /sbin/iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
}

# Block Uncommon MSS Values
function ipt_block_unc_mss(){
    /sbin/iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP
}

# Block Packets With Bogus TCP Flags
function ipt_block_bogus_tcp_flags(){
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
    /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
}

# Block Packets From Private Subnets (Spoofing)
function ipt_block_spoofed_pckts(){
    /sbin/iptables -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP
    /sbin/iptables -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP
    /sbin/iptables -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP
    /sbin/iptables -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP
    /sbin/iptables -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP
    /sbin/iptables -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP
    /sbin/iptables -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP
    /sbin/iptables -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP
    /sbin/iptables -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
}

# Drop ICMP (you usually don't need this protocol)
# This drops all ICMP packets. ICMP is only used to ping a host to find out if it’s still alive.
# Because it’s usually not needed and only represents another vulnerability that attackers can exploit, we block all ICMP packets
# to mitigate Ping of Death (ping flood), ICMP flood and ICMP fragmentation flood.
function ipt_drop_icmp(){
    /sbin/iptables -t mangle -A PREROUTING -p icmp -j DROP
}

# This iptables rule helps against connection attacks. It rejects connections from hosts that have more than 80 established connections.
# If you face any issues you should raise the limit as this could cause troubles with legitimate clients that establish a large number of TCP connections.
function ipt_reject_above_80(){
    /sbin/iptables -A INPUT -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset
}

# Drop fragments in all chains
# This rule blocks fragmented packets. Normally you don’t need those and blocking fragments will mitigate UDP fragmentation flood.
# But most of the time UDP fragmentation floods use a high amount of bandwidth that is likely to exhaust the capacity of your network card,
# which makes this rule optional and probably not the most useful one.
function ipt_drop_frags_all_chains(){
    /sbin/iptables -t mangle -A PREROUTING -f -j DROP
}

# Limit connections per source IP
function ipt_limit_max_conns_per_source(){
    /sbin/iptables -A INPUT -p tcp -m connlimit --connlimit-above 111 -j REJECT --reject-with tcp-reset
}

# This limits incoming TCP RST packets to mitigate TCP RST floods.
# Effectiveness of this rule is questionable.
function ipt_limit_rst_pckts(){
    /sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
    /sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP
}

# Limits the new TCP connections that a client can establish per second. This can be useful against connection attacks,
# but not so much against SYN floods because the usually use an endless amount of different spoofed source IPs.
function ipt_limit_new_conns_per_source(){
    /sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
    /sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP
}

# The purpose of SYNPROXY is to check whether the host that sent the SYN packet actually establishes a full TCP connection
# or just does nothing after it sent the SYN packet.
# Here are iptables SYNPROXY rules that help mitigate SYN floods that bypass our other rules:
function ipt_synproxy_mitigation(){
    iptables -t raw -A PREROUTING -p tcp -m tcp --syn -j CT --notrack
    iptables -A INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460
    iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
}

# SSH brute-force protection
function ipt_ssh_brute_force_prot(){
    /sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --set
    /sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP
}

# Protection against port scanning
function ipt_port_scan_prot(){
    /sbin/iptables -N port-scanning
    /sbin/iptables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN
    /sbin/iptables -A port-scanning -j DROP
    
}

function usage() {
    echo "Usage: ${0##*/} [Options]"
    echo "       "
    echo "Purpose: To enable firewall (iptables) rules preventing DDoS attacks"
    echo "       "
    echo "Options"
    echo "-a | --all: Make all rules to effect"
    echo "-h | --help : Show this help"
    echo "-g | --suggestion : Show Sysctl Config Suggestion help"
    echo "-s | --select: Select a rule to apply. Rule number must be provided"
    echo "-v | --view: View iptables statments inside a rule content. Rule number must be provided"
    echo "-l | --list: List iptables rules "
    return 0;
}

function main(){
    precheck "iptables"
    
    # Option strings
    SHORT=":a::s::v::h::l::g"
    LONG=":all,select,view,help,list,suggest"
    
    # Read the options
    OPTS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    if [ $? -ne 0 ] ; then
        echo "Wrong parameters.OPTS=[$OPTS][ $* ]"
        usage
        exit 0
    fi
    
    case "$1" in
        -a | --all )
            echo "All iptables rules to be enabled."
            cat "$0" | grep "ipt_" | grep "#" | grep -v function | cut -d"#" -f2- | sed -e 's/#//g'
        ;;
        -s | --select )
            [ -n "$2" ] && echo "$(cat "$0" | grep "ipt_" | grep "#" | grep -v function | grep " $2:" | cut -d"#" -f2- | sed -e 's/#//g') rule content:" | sed -e 's/  / /g'
            case "$2" in
                1)
                    ipt_block_inv_pckts
                ;;
                2)
                    ipt_drop_not_syn_pckts
                ;;
                3)
                    ipt_block_unc_mss
                ;;
                4)
                    ipt_block_bogus_tcp_flags
                ;;
                5)
                    ipt_block_spoofed_pckts
                ;;
                6)
                    ipt_drop_icmp
                ;;
                7)
                    ipt_reject_above_80
                ;;
                8)
                    ipt_drop_frags_all_chains
                ;;
                9)
                    ipt_limit_max_conns_per_source
                ;;
                10)
                    ipt_limit_rst_pckts
                ;;
                11)
                    ipt_limit_new_conns_per_source
                ;;
                12)
                    ipt_synproxy_mitigation
                ;;
                13)
                    ipt_ssh_brute_force_prot
                ;;
                14)
                    ipt_port_scan_prot
                ;;
                *)  usage
                    exit 1
                ;;
            esac
            exit 0
        ;;
        -l | --list )
            cat "$0" | grep "ipt_" | grep "#" | grep -v function | cut -d"#" -f2- | sed -e 's/#//g'
            exit 0
        ;;
        -v | --view )
            [ -n "$2" ] && echo "$(cat "$0" | grep "ipt_" | grep "#" | grep -v function | grep " $2:" | cut -d"#" -f2- | sed -e 's/#//g') rule content:" | sed -e 's/  / /g'
            case "$2" in
                1)
                    LC_ALL=C type -a ipt_block_inv_pckts | grep -v "function\|()\|^{\|^}"
                ;;
                2)
                    LC_ALL=C type -a ipt_drop_not_syn_pckts | grep -v "function\|()\|^{\|^}"
                ;;
                3)
                    LC_ALL=C type -a ipt_block_unc_mss | grep -v "function\|()\|^{\|^}"
                ;;
                4)
                    LC_ALL=C type -a ipt_block_bogus_tcp_flags | grep -v "function\|()\|^{\|^}"
                ;;
                5)
                    LC_ALL=C type -a ipt_block_spoofed_pckts | grep -v "function\|()\|^{\|^}"
                ;;
                6)
                    LC_ALL=C type -a ipt_drop_icmp | grep -v "function\|()\|^{\|^}"
                ;;
                7)
                    LC_ALL=C type -a ipt_reject_above_80 | grep -v "function\|()\|^{\|^}"
                ;;
                8)
                    LC_ALL=C type -a ipt_drop_frags_all_chains | grep -v "function\|()\|^{\|^}"
                ;;
                9)
                    LC_ALL=C type -a ipt_limit_max_conns_per_source | grep -v "function\|()\|^{\|^}"
                ;;
                10)
                    LC_ALL=C type -a ipt_limit_rst_pckts | grep -v "function\|()\|^{\|^}"
                ;;
                11)
                    LC_ALL=C type -a ipt_limit_new_conns_per_source | grep -v "function\|()\|^{\|^}"
                ;;
                12)
                    LC_ALL=C type -a ipt_synproxy_mitigation | grep -v "function\|()\|^{\|^}"
                ;;
                13)
                    LC_ALL=C type -a ipt_ssh_brute_force_prot | grep -v "function\|()\|^{\|^}"
                ;;
                14)
                    LC_ALL=C type -a ipt_port_scan_prot | grep -v "function\|()\|^{\|^}"
                ;;
                *)  usage
                    exit 1
                ;;
            esac
            exit 0
        ;;
        -g | --suggest )
            suggest_sysctl
            exit 0
        ;;
        *)  usage
            exit 0
        ;;
    esac
    
    ipt_block_inv_pckts             ### 1: Drop invalid packets ###
    ipt_drop_not_syn_pckts          ### 2: Drop TCP packets that are new and are not SYN ###
    ipt_block_unc_mss               ### 3: Drop SYN packets with suspicious MSS value ###
    ipt_block_bogus_tcp_flags       ### 4: Block packets with bogus TCP flags ###
    ipt_block_spoofed_pckts         ### 5: Block spoofed packets ###
    ipt_drop_icmp                   ### 6: Drop ICMP (you usually don't need this protocol) ###
    ipt_reject_above_80             ### 7: Reject above 80 conns per host ###
    ipt_drop_frags_all_chains       ### 8: Drop fragments in all chains ###
    ipt_limit_max_conns_per_source  ### 9: Limit max connections per source IP ###
    ipt_limit_rst_pckts             ### 10: Limit RST packets ###
    ipt_limit_new_conns_per_source  ### 11: Limit new TCP connections per second per source IP ###
    ipt_synproxy_mitigation         ### 12: Use SYNPROXY on all ports (disables connection limiting rule) ###
    ipt_ssh_brute_force_prot        ### 13: SSH brute-force protection ###
    ipt_port_scan_prot              ### 14: Protection against port scanning ###
}

main "$@"


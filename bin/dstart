#!/usr/bin/env bash
# This script is intended to be run as an autostart/restart helper.

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

function usage(){
    echo -e "Usage: $(basename $0) <executable name> <parameters>"
    echo -e "    Start an application with parameters or stop/start the same (with parameters) if already running.\n"
}

function main(){
    [ $# -eq 0 ] && usage && return 1
    precheck "pgrep"
    precheck "pkill"
    local orig_cmd="$1"
    #local at_least="$(LC_ALL=C type -a $orig_cmd 2> /dev/null | grep -v "alias\|keyword" | grep " is " | awk 'NR == 1 {print $1}')"
    #[ -z "$at_least" ] && log "Invalid command $orig_cmd" && echo -e "Invalid command $orig_cmd" && usage && return 1
    local cmd="$(findutil "$orig_cmd")"
    [ -z "$cmd" ] && log "Invalid command $orig_cmd" && echo -e "Invalid command $orig_cmd" && usage && return 1
    shift
    kill_them "but-me" "$orig_cmd"

    cmd="$(echo "$cmd $@ &")"
    eval $cmd &
    
    #setsid -w $cmd "$@" &
    
    #$cmd "$@" &
    #echo "$@" | xargs $cmd &
    #$cmd <<< "$@" &
    #$cmd <<< "$args" &
    
    #local rc="$?"
    #if [ $rc -eq 0 ]; then
    if [ $? -eq 0 ]; then
        disown
        echo "Starting $cmd"
        log "Starting $cmd"
        #echo "Starting $cmd $@"
        #log "Starting $cmd $@"
    else
        #echo "Failed [ $rc ] to start $cmd $@"
        #log "Failed [ $rc ] to start $cmd $@"
        echo "Failed [ $rc ] to start $cmd"
        log "Failed [ $rc ] to start $cmd"
    fi
    exit 0
}

main "$@"
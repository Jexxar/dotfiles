#!/usr/bin/env bash

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

# Free memory
function f_mem(){ awk '/MemFree/{print $2"M"}' /proc/meminfo ; }

# Total memory
function t_mem(){ awk '/MemTotal/{print $2"M"}' /proc/meminfo ; }

# Available memory
function a_mem(){ awk '/MemAvailable/{print $2"M"}' /proc/meminfo ; }

# Strip characters from the end of a string. Usage: rstp "The Quick Brown Fox" "Fox"
function rstp(){ printf "%s\\n" "${1%%$2}"; }

# Uptime since
function u_since(){ uptime -ps ; }

# Uptime extended
function u_activ(){ uptime -p | tr -s ' ' | sed -e 's/up //g' ;}

# find wm (window manager)
function f_wm(){
    [ ! xset q &>/dev/null ] && echo "tty" && return 0
    local wm=""
    [ -n "$XDG_CURRENT_DESKTOP" ] && echo "$XDG_CURRENT_DESKTOP" && return 0
    hash wmctrl 2> /dev/null && wm=$(wmctrl -m | awk '/Name:/ {print $2}')
    [ -n "$wm" ] && echo "$wm" && return 0
    hash xprop 2> /dev/null && {
        local id="$(xprop -root -notype _NET_SUPPORTING_WM_CHECK 2> /dev/null | grep "id" | awk '{print $5}')"
        [ -n "$id" ] && wm="$(xprop -id "0x40009b" -notype -len 100 -f _NET_WM_NAME 8t | awk '/_NET_WM_NAME/ {gsub(/"/, "", $3); print $3 }')"
        [ -n "$wm" ] && echo "$wm" && return 0
    }
    [ -n "$DESKTOP_SESSION" ] && echo "$DESKTOP_SESSION" | tr '[:upper:]' '[:lower:]' | sed -e "s/\b\(.\)/\u\1/g" && return 0
    echo ""
    return 0
}

function batt_perc(){
    if hash upower 2> /dev/null; then
        local UPOWER_OUTPUT=$(upower --show-info $(upower --enumerate | grep BAT) | grep percentage | tail --bytes 5)
        echo ${UPOWER_OUTPUT: : -1}
        return 0
    fi
    if hash acpi 2> /dev/null; then
        local ACPI_OUTPUT=$(acpi -b)
        case $ACPI_OUTPUT in
            *" Unknown"*)
                local PERC_OUTPUT=$(echo $ACPI_OUTPUT | head -c 22 | tail -c 2)
                case $PERC_OUTPUT in
                    *%)
                        echo "0${PERC_OUTPUT}" | head -c 2
                    ;;
                    *)
                        echo ${PERC_OUTPUT}
                    ;;
                esac
            ;;
            
            *" Charging"* | *" Discharging"*)
                local PERC_OUTPUT=$(echo $ACPI_OUTPUT | awk -F, '/,/{gsub(/ /, "", $0); gsub(/%/,"", $0); print $2}' )
                echo ${PERC_OUTPUT}
            ;;
            *" Full"*)
                echo '100'
            ;;
            *)
                echo 'no'
            ;;
        esac
        return 0
    fi
    if hash pmset 2> /dev/null; then
        local PMSET_OUTPUT=$(pmset -g ps | sed -n 's/.*[[:blank:]]+*\(.*%\).*/\1/p')
        case $PMSET_OUTPUT in
            100*)
                echo '100'
            ;;
            *)
                echo $PMSET_OUTPUT | head -c 2
            ;;
        esac
        return 0
    fi
    if hash ioreg 2> /dev/null; then
        local IOREG_OUTPUT=$(ioreg -n AppleSmartBattery -r | awk '$1~/Capacity/{c[$1]=$3} END{OFMT="%05.2f%%"; max=c["\"MaxCapacity\""]; print (max>0? 100*c["\"CurrentCapacity\""]/max: "?")}')
        case $IOREG_OUTPUT in
            100*)
                echo '100'
            ;;
            *)
                echo $IOREG_OUTPUT | head -c 2
            ;;
        esac
        return 0
    fi
    if hash WMIC 2> /dev/null; then
        local WINPC=$(echo porcent=$(WMIC PATH Win32_Battery Get EstimatedChargeRemaining /Format:List) | grep -o '[0-9]*')
        case $WINPC in
            100*)
                echo '100'
            ;;
            *)
                echo $WINPC
            ;;
        esac
        return 0
    fi
    echo "no"
}


# progress bar
function draw(){
    local perc=$1
    local size=$2
    local inc=$(( perc * size / 100 ))
    local FULL=━
    local EMPTY=┄
    local out=""
    for v in $(seq 0 $(( size - 1 ))); do
        test "$v" -le "$inc" && out="${out}${FULL}" || out="${out}${EMPTY}"
    done 
    echo "$out"
}

# Greetings (A kind of fetch info display)
function greet(){
    local DIST="$(~/bin/distro-info -1 | tr '[:upper:]' '[:lower:]' | sed -e "s/\b\(.\)/\u\1/g")"
    DIST="$(rstp $DIST " ")"
    local KERNEL="$(uname -rmo)"
    local TIMEU="$(u_activ)"
    local TIMED="$(u_since)"
    local FrMEM="$(f_mem)"
    local TtMEM="$(t_mem)"
    local AvMEM="$(a_mem)"
    local BVERS="$BASH_VERSION"
    local DATE="$(date +"%Y/%m/%d")"
    printf " \n"
    printf " System Status in $DATE:\n"
    printf "      distro  $DIST @ kernel $KERNEL\n"
    printf "      uptime  $TIMEU since $TIMED\n"
    printf "       shell  $BVERS @ $(f_wm)\n"
    # cpu
    local CpuUsg=$(awk  '/cpu / {usage=($2+$4)*100/($2+$4+$5)} END {print usage}' /proc/stat)
    local CpuLvl=$(LC_ALL=C printf "%.0f" $CpuUsg)
    [ -n "$CpuLvl" ] && printf "   %-4s %-5s %-25s \n" " cpu" " $CpuLvl%" $(draw $CpuLvl 15)

    # ram
    local RamM=$(free | awk '/Mem/ {print int($3/$2 * 100.0)}')
    [ -n "$RamM" ] &&  printf "   %-4s %-5s %-25s \n" " ram" " $RamM%" $(draw $RamM 15)

    # battery
    local charge="$(batt_perc 2> /dev/null)"
    if [ -n "$charge" ] && [ "$charge" != "no" ]; then
        printf "   %-4s %-5s %-25s \n" " bat" " $charge%" $(draw $charge 15)
    fi

    # volume
    if  hash amixer 2> /dev/null; then
        if amixer get Master | grep -q 'Right'; then
            local vol=$(amixer sget Master | grep 'Right:' | awk -F'[][]' '{ print $2 }' | tr -d '[]%')
        else
            local vol=$(awk -F"[][]" '/%/ { print $2 }' <(amixer sget Master)  | tr -d '[]%')
        fi
        [ -n "$vol" ] && printf "   %-4s %-5s %-25s \n" " vol" " $vol%" $(draw $vol 15)
    fi
    
    # temperature
    if hash sensors 2> /dev/null; then
        local SensTemp=$(sensors | awk '/Core 0/ {gsub(/\+/,"",$3); gsub(/\..+/,"",$3)    ; print $3}')
        if [ -n "$SensTemp" ]; then
            printf "   %-4s %-5s %-25s \n" "temp" " $SensTemp˚C" $(draw $SensTemp 15)
        fi
    fi
    hash my-motd 2> /dev/null && my-motd
    echo -e "\n"
    return 0
}

function doGreet() {
    greet | sed -r 's/\x1B\[(;?[0-9]{1,3})+[mGK]//g'
    return 0
}

function main() {
    if xset q &>/dev/null; then
        if checkfor "gxmessage"; then
            doGreet | gxmessage -font "Hack Nerd Font Mono 9" -center -borderless -sticky -ontop  -file - 2> /dev/null
        elif checkfor "yad"; then
            doGreet | yad  --text-info --title "Summary" --text-align=fill --fixed --undecorated --on-top --sticky --center --width 900 --height 300 --fontname="Hack Nerd Font Mono 9" 2> /dev/null
        elif checkfor "zenity"; then
            doGreet | zenity  --text-info --title "Summary" --width 900 --height 300 --font "Hack Nerd Font Mono 9" 2> /dev/null
        fi
    else
        doGreet | cat -
    fi
}

main "$@"

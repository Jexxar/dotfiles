#!/usr/bin/env bash
# This script is intended to be run as the main reboot script for this installation.
set -u

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

function do_reboot() {
    if is_running_X; then
        if is_session_active; then
            # try for dbus freedesktop service to interact with logind
            can_reboot && dbus_reboot && exit 0
            # try elogind version
            checkfor "loginctl" && {
                if loginctl -h | grep -q "reboot"; then
                    loginctl reboot
                    exit 0
                fi
            }
        fi
    fi
    local su_no_pw="$(sudo -l | grep "NOPASSWD")"
    # make sure systemctl reboot is in sudoers file
    [[ $su_no_pw == *"systemctl"* ]] && checkfor "systemctl" && sudo systemctl reboot && exit 0
    # make sure reboot is in sudoers file
    [[ $su_no_pw == *"reboot"* ]] && checkfor "reboot" && sudo reboot && exit 0
    log "No suitable reboot command found. Check your installation." && exit 0
}

function do_test() {
    if is_running_X ; then
        log "X is running"
        if is_session_active; then
            log "User $USER has an active session. Polkit allow to reboot"
            can_reboot && log "User $USER can reboot using Dbus"
            checkfor "loginctl" && {
                if loginctl -h | grep -q "reboot"; then
                    log "loginctl allowed to reboot"
                else
                    log "loginctl not allowed to reboot"
                fi
            }
        else
            log "user $USER does NOT have an active session"
        fi
    fi
    local su_no_pw="$(sudo -l | grep "NOPASSWD")"
    [[ $su_no_pw == *"systemctl"* ]] && checkfor "systemctl" && log "Found: sudo systemctl reboot"
    [[ $su_no_pw == *"reboot"* ]] && checkfor "reboot" && log "Found: sudo reboot"
    return 0
}

function main(){
    local cmd=${1:-reboot}
    
    case "$cmd" in
        reboot)
            do_reboot
        ;;
        debug)
            do_test
        ;;
        *)
            log "Unrecognized option: $1"
    esac
}

main "$@"

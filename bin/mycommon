#!/usr/bin/env bash

test -f ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs && source ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs


# Find and/or create path for logging
function findLogPath(){
    local lpath="/var/log"
    [ -w "$lpath" ] && echo "$lpath" && return 0  || lpath="$HOME/.local/var/log"
    [ ! -d "$lpath" ] && mkdir -p $lpath
    [ -d "$lpath" ] && echo "$lpath" && return 0 || echo "" &&  return 1
}

# Script name that is sourcing this
myLogScriptName="${0##*/}"
myLogSctiptBase="${myLogScriptName%%.*}"
# Find a path to Log file
myLogPath=$(findLogPath)
myLogFile="$myLogPath/$myLogSctiptBase.log"

# Print the given message with a timestamp.
function info(){
    printf '%s %s\n' "$(date +%F_%H:%M:%S | tr '_' ' ') $HOSTNAME" "$*"
}

# Standard log file
function log(){
    local LOCK_rc=0
    if [ ! -f "$myLogFile" ]; then
        touch "$myLogFile"
        LOCK_rc=$?
    fi
    #if [[ $LOCK_rc -eq 0 && -f "$myLogFile" ]]; then
    if [[ $LOCK_rc -eq 0 && -w "$myLogFile" ]]; then
        info "$@" | tee -a "$myLogFile" > /dev/null
    else
        info "$@"
    fi
    return 0
}

function bailout(){
    info "Error: $@"
    [ -f "$myLogFile" ] && log "Error: $@"
    exit 1
}

# Check for required software
function precheck(){
    #hash "$1" >/dev/null 2>&1
    #type -p "$1" >/dev/null 2>&1
    command -v "$1" >/dev/null 2>&1
    [ $? -eq 0 ] || bailout "Please install $1"
}

# Check for software existence
function checkfor(){
    #hash "$1" >/dev/null 2>&1
    #type -p "$1" >/dev/null 2>&1
    command -v "$1" >/dev/null 2>&1
    [ $? -eq 0 ] && return 0 || return 1
}

# Find full path for an utility program
function findutil(){
    local p=""
    for u in "$@"; do
        p="$(command -v "$u" 2> /dev/null)" && echo "$p" && return 0
        p="$(type -p "$u" 2> /dev/null)" && echo "$p" && return 0
        which --skip-alias which > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            local WHICH="$(which --skip-alias which)"
        else
            local WHICH="$(which which)"
        fi
        p="$(${WHICH} "$u" 2> /dev/null)" && echo "$p" && return 0
    done
    echo ""
    return 1
}

# urlencode <string>
function urlencode(){
    local old_lc_collate=$LC_COLLATE
    LC_COLLATE=C
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done
    LC_COLLATE=$old_lc_collate
}

# Using awk and hexdump
function url_encode(){
    precheck "hexdump"
    precheck "awk"
    local encodedurl="$1";
    encodedurl=$(echo $encodedurl | hexdump -v -e '1/1 "%02x\t"' -e '1/1 "%_c\n"' | LANG=C awk '
     $1 == "20"                    { printf("%s",   "+"); next } # space becomes plus
     $1 ~  /0[adAD]/               {                      next } # strip newlines
     $2 ~  /^[a-zA-Z0-9.*()\/-]$/  { printf("%s",   $2);  next } # pass through what we can
                                   { printf("%%%s", $1)        } # take hex value of everything else
    ')
    echo -e "$encodedurl"
}

# raw urlencode for GNU systems only
function rawurlencode(){
    local string="${1}"
    echo -e "$string" | od -An -tx1 | tr ' ' % | xargs printf "%s"
    #echo -ne "$string" | tr -d '\n' | xxd -plain  | sed 's/\(..\)/%\1/g'
}

# urldecode <string>
function urldecode(){
    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}

# XML String escape encode
function esc_enc(){
    local aux="$*"
    local daux=""
    # only escape if string needs it
    case "$aux" in    # only escape if string needs it
        *\&*|*\<*|*\>*|*\"*|*\'*)
            #daux=$( echo "$aux" | sed "s/\&/\&amp;/g;s/</\&lt;/g;s/>/\&gt;/g;s/\"/\&quot;/g;s/'/\&apos;/g;" | sed 's/\&apos;/\&apos;\&quot;\&apos;\&quot;\&apos;/g;' )
            daux=$( echo "$aux" | sed "s/\&/\&amp;/g;s/</\&lt;/g;s/>/\&gt;/g;s/\"/\&quot;/g;s/'/\&apos;/g;" )
        ;;
        *) daux=$aux;;
    esac
    echo "$daux"
    return 0
}

# String escape space
function esc_space(){
    local aux="$*"
    echo "$aux" | sed "s/ /\\\ /g;"
    return 0
}

# Round with awk
function awkRound(){
    awk 'BEGIN{printf "%."'$1'"f\n", "'$2'"}'
}

# direct it all to /dev/null
function nullify(){
    "$@" >/dev/null 2>&1
}

# lsof similar behaviour for a process - raw
function _lsof(){
    local i=""
    local l=""
    for p in /proc/{0..9}*; do
        i=$(basename "$p")
        for f in "$p"/fd/*; do
            l=$(readlink -e "$f")
            if [ "$l" ]; then
                echo "$i: $l"
            fi
        done
    done | sort -u | sort -n
}

# lsof similar behaviour for a process with some filtering
function lsof_p(){
    [ -z "$1" ] && return 1
    local i=""
    local l=""
    #for x in $(ps_ISO "$1" | sed 's/bash //g' | awk '{print $3" "$5}' | grep "$1" | grep -v "grep" | awk '{print $1}'); do
    for x in $(ps_ISO "$1" | grep -iw "$1" | grep -v "grep" | awk '{print $3}'); do
        if [ -n "$x" ]; then
            i=$(basename "/proc/$x")
            for f in "/proc/$x"/fd/*; do
                l=$(readlink -e "$f")
                [ -n "$l" ] && echo "$i: $l"
            done
        fi
    done | sort -u | sort -n | grep -v "/dev/null\|/dev/urandom\|/dev/dri\|\.cache\|/dev/pts\|gvfs-metadata"
}

# Check for a git repo in that location
function is_git_repository(){
    [ "$(git rev-parse &>/dev/null; printf $?)" -eq 0 ] && return 0 || return 1
}

# Trim all spaces from a string
# Usage: trim "The Quick Brown Fox "
function trim(){
    set -f
    set -- $*
    printf "%s\\n" "$*"
    set +f
}

# Trim quotes from a string.
# Usage: trim_quotes "string"
function trim_quotes(){
    trim="${1//\'}"
    printf "%s\\n" "${trim//\"}"
}

# Trim all leading and tailing spaces
# Usage: trim_string "   example   string    "
function trim_spaces(){
    : "${1#"${1%%[![:space:]]*}"}"
    : "${_%"${_##*[![:space:]]}"}"
    printf '%s\n' "$_"
}

# remove trailing slash (substitute for realpath -s)
# warning: returns empty if $1 is just /
function trim_slash(){
    printf "%s" "${1%/}"
}

# Trim leading spaces
# Usage: ltrim "   example   string    "
function ltrim(){
    : "${1#"${1%%[![:space:]]*}"}"
    printf '%s\n' "$_"
}

# Trim tailing spaces
# Usage: rtrim "  example   string    "
function rtrim(){
    : "${1%"${1##*[![:space:]]}"}"
    printf '%s\n' "$_"
}

# Ask for a simple yes/no confirmation
# Usage: ask_confirmation "Are you ready?"
function ask_confirmation(){
    printf "\n"
    printf "\e[1;37m$@\e[0m"
    read -p " (y/n) " -n 1
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
# Usage: is_confirmed
function is_confirmed(){
    [[ "$REPLY" =~ ^[Yy]$ ]] && return 0 || return 1
}

# Usage: say text [delayAfterText]
function say(){
    fold -s -w 76 <<< "$1" | sed 's/^/  /' # wraps text nicely and adds two leading spaces
    snore "${2-0}"
}

# ISO timestamp format
function timestamp(){
    date -Ins | cut -b 1-29 | sed -e 's/,/_/g; s/\./_/g; s/:/-/g; s/T/_/g'
}

# ps with ISO date format
function ps_ISO(){
    if [ -z "$1" ]; then
        ps -eo etimes,ruser,pid,ppid,cmd --sort=start_time | awk 'BEGIN{now=systime()} {$1=strftime("%Y-%m-%d-%H:%M:%S", now-$1); print $0}' | grep -v "grep\|awk\|ps -eo"
    else
        ps -eo etimes,ruser,pid,ppid,cmd --sort=start_time | awk 'BEGIN{now=systime()} {$1=strftime("%Y-%m-%d-%H:%M:%S", now-$1); print $0}' | grep "$1" | grep -v "grep\|awk\|ps -eo"
    fi
}

# Over Killing processes using kill command
function proper_kill(){
    kill -SIGTERM "$1" > /dev/null 2>&1 || true
    while 2>/dev/null kill -0 "$1"; do
        for SIG in 2 9 ; do 
            if ps -p $1 > /dev/null; then
                kill -$SIG "$1" > /dev/null 2>&1 || true; 
                snore 0.3; 
            fi
        done
    done
    return 0
    #ps -p $1 > /dev/null 2>&1 && return 1 || return 0
}

# Killing user processes helper
function kill_them(){
    kt_usage(){
        echo "kill_them Usage:"
        echo "    Kill_them {option} {target name} [y]"
        echo " "
        echo "    Options:"
        echo "      - all: Kill all possible processes matching target name"
        echo "      - but-me: Kill processes matching target name except my own pid"
        echo "      - strict: Kill only non bash processes matching target name"
        echo "      - but-me-bash: Kill only bash processes matching target name except my own pid"
        echo "      - sh-c: Kill only sh -c processes attached to the target name"
        echo "      - check: Check if such a process is running. Dont kill."
    }
    [ -z "$2" ] && kt_usage && log "kill_them: Argument error. You must provide an option and a target" && return 1
    local s_name="$2"
    local has="n"
    [ $# -gt 2 ] && local shw="y" || local shw="n"
    case ${1-check} in
        all)
            LC_ALL=C pkill --euid "$(id -u)" --exact "$s_name" > /dev/null 2>&1 && has="y" 
            #LC_ALL=C pkill -USR1 --euid "$(id -u)" --exact "$s_name" > /dev/null 2>&1 && has="y" 
            if [ $? -eq 0 ]; then 
                [ "$shw" == "y" ] && log "kill_them all: Stopping instances(pkill): name=$s_name"
                return 0;
            else
                [ "$shw" == "y" ] && log "kill_them all: Cannot Stop instances(pkill): name=$s_name";
            fi
            LC_ALL=C killall -u "$USER" "$s_name" > /dev/null 2>&1 && has="y" 
            if [ $? -eq 0 ]; then
                [ "$shw" == "y" ] && log "kill_them all: Stopping instances(killall): name=$s_name";
                return 0;
            else
                [ "$shw" == "y" ] && log "kill_them all Cannot Stop instances(killall): name=$s_name"
            fi
            for i in $(ps_ISO "$s_name" | grep -v "$0" | awk '{print $3}'); do
                [ -n "$i" ] && proper_kill "$i" && has="y" ;
                [ $? -eq 0 ] && [ "$shw" == "y" ] && log "kill_them all: Stopping instance(kill): pid=$i name=$s_name";
            done
            [ "$has" == "n" ] && [ "$shw" == "y" ] && log "kill_them all: No process $s_name found";
            return 0;
        ;;
        but-me)
            for i in $(ps_ISO "$s_name" | awk '{print $3}'); do
                if [ "$i" != "$$" ]; then
                    proper_kill "$i" && has="y" 
                    [ $? -eq 0 ] && [ "$shw" == "y" ] && log "kill_them but-me: Stopping instance(kill): pid=$i name=$s_name"
                fi
            done
            [ "$has" == "n" ] && [ "$shw" == "y" ] && log "kill_them but-me: No process $s_name found"
            return 0
        ;;
        strict)
            for i in $(ps_ISO "$s_name" | sed 's/bash //g' | grep -v "bash\|sh -c\|grep" | awk '{print $3}'); do
                proper_kill "$i" && has="y" 
                [ $? -eq 0 ] && [ "$shw" == "y" ] && log "kill_them strict: Stopping instance(kill): pid=$i name=$s_name"
            done
            [ "$has" == "n" ] && [ "$shw" == "y" ] &&  log "kill_them strict: No process $s_name found"
            return 0
        ;;
        but-me-bash)
            for i in $(ps_ISO "$s_name" | grep -F "bash " | grep -v "grep" | awk '{print $3}'); do
                if [ "$i" != "$$" ]; then
                    proper_kill "$i" && has="y" 
                    [ $? -eq 0 ] && [ "$shw" == "y" ] && log "kill_them but-me-bash: Stopping instance(kill): pid=$i name=$s_name"
                fi
            done
            [ "$has" == "n" ] && [ "$shw" == "y" ] && log "kill_them but-me-bash: No process bash + $s_name found"
            return 0
        ;;
        sh-c)
            for i in $(ps_ISO "$s_name" | sed 's/bash //g' | grep -P "sh -c" | grep -v "grep" | awk '{print $3}'); do
                proper_kill "$i" && has="y" 
                [ $? -eq 0 ] && [ "$shw" == "y" ] && log "kill_them sh-c: Stopping instance(kill): pid=$i name=$s_name"
            done
            [ "$has" == "n" ] && [ "$shw" == "y" ] &&  log "kill_them sh-c: No process sh -c + $s_name found"
            return 0
        ;;
        check)
            for i in $(ps_ISO "$s_name" | awk '{print $3}'); do
                [ "$shw" == "y" ] && log "kill_them check: Process $s_name pid=$i is running and can be terminated" && has="y"
            done
            [ "$has" == "n" ] && [ "$shw" == "y" ] &&  log "kill_them check: No process $s_name not found"
            return 0
        ;;
    esac
    return 0
}

# Kill older instances of itself (bash based scripts)
function kill_older(){
    snore 0.3
    kill_them "but-me-bash" "${0##*/}"
    return 0
}

# Kill all process by pattern (but not me)
function kill_it(){
    kill_them "but-me" "$1"
    return 0
}

# Cleanup running processes.
function stop_it(){
    [ -z "$1" ] && return 1
    case ${2:-stop} in
        stop)
            if [ $# -gt 2 ]; then 
                kill_them "all" "$1" "y"
            else
                kill_them "all" "$1"
            fi
            return 0
        ;;
        debug)
            kill_them "check" "$1" "y"
            return 0
        ;;
        *)
            log "2nd argument must be: stop or debug";
            return 1
        ;;
    esac
}

# Check if an active session exists
# If so an user can issue power related commands via policykit
function is_session_active(){
    loginctl show-session $XDG_SESSION_ID --property=Active | grep "yes" > /dev/null || return 1
}

# Check if can hibernate using dbus
function can_hibernate(){
    gdbus call --system --dest org.freedesktop.login1 --object-path /org/freedesktop/login1 --method org.freedesktop.login1.Manager.CanHibernate | grep "yes" > /dev/null && return 0
    checkfor "qdbus" && qdbus --system org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.login1.Manager.CanHibernate | grep "yes" > /dev/null && return 0 
    return 1
}

# Check if can poweroff using dbus
function can_poweroff(){
    gdbus call --system --dest org.freedesktop.login1 --object-path /org/freedesktop/login1 --method org.freedesktop.login1.Manager.CanPowerOff | grep "yes" > /dev/null && return 0
    checkfor "qdbus" && qdbus --system org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.login1.Manager.CanPowerOff | grep "yes" > /dev/null && return 0
    return 1
}

# Check if can reboot using dbus
function can_reboot(){
    gdbus call --system --dest org.freedesktop.login1 --object-path /org/freedesktop/login1 --method org.freedesktop.login1.Manager.CanReboot | grep "yes" > /dev/null && return 0
    checkfor "qdbus" && qdbus --system org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.login1.Manager.CanReboot | grep "yes" > /dev/null && return 0
    return 1
}

# Check if can suspend using dbus
function can_suspend(){
    gdbus call --system --dest org.freedesktop.login1 --object-path /org/freedesktop/login1 --method org.freedesktop.login1.Manager.CanSuspend | grep "yes" > /dev/null && return 0
    checkfor "qdbus" && qdbus --system org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.login1.Manager.CanSuspend | grep "yes" > /dev/null && return 0
    return 1
}

# Hibernate using dbus logind (only if user is authorized)
function dbus_suspend(){
    dbus-send --system \
    --print-reply=literal \
    --dest=org.freedesktop.login1 \
    /org/freedesktop/login1 "org.freedesktop.login1.Manager.Hibernate" boolean:true
}

# Poweroff using dbus logind  (only if user is authorized)
function dbus_poweroff(){
    dbus-send --system \
    --print-reply=literal \
    --dest=org.freedesktop.login1 \
    /org/freedesktop/login1 "org.freedesktop.login1.Manager.PowerOff" boolean:true
}

# Reboot using dbus logind  (only if user is authorized)
function dbus_reboot(){
    dbus-send --system \
    --print-reply=literal \
    --dest=org.freedesktop.login1 \
    /org/freedesktop/login1 "org.freedesktop.login1.Manager.Reboot" boolean:true
}

# Suspend using dbus logind (only if user is authorized)
function dbus_suspend(){
    dbus-send --system \
    --print-reply=literal \
    --dest=org.freedesktop.login1 \
    /org/freedesktop/login1 "org.freedesktop.login1.Manager.Suspend" boolean:true
}

# Control the dunst daemon, if it is running.
function dunstctl(){
    case ${1:-} in
        start)
            [ $(pgrep -lfc dunst) -ge 1 ] && return 0 ## log "Notifications daemon already running."
            # log "Starting notifications daemon."
            checkfor "dunst" && dunst &
            disown
        ;;
        stop)
            [ $(pgrep -lfc dunst) -eq 0 ] && return 0 ## log "Notifications daemon not running."
            # log "Stopping notifications daemon."
            pkill -USR1 --euid "$(id -u)" --exact dunst
        ;;
        restart | resume)
            [ $(pgrep -lfc dunst) -ge 1 ] && pkill -USR2 --euid "$(id -u)" --exact dunst
            # log "...Resuming notifications daemon."
            checkfor "dunst" && dunst &
            disown
        ;;
        check)
            log "Checking for dunst."
            checkfor "dunst" && return 0 || return 1
        ;;
        *)
            echo "dunstctl argument required: start, stop, resume or check"
            log "dunstctl argument required: start, stop, resume or check"
            return 1
        ;;
    esac
    return 0
}

# check for a running X server - xset required
function is_running_X(){
    checkfor "xset" && xset -q &>/dev/null && return 0
    return 1
}

# find wm (window manager)
function _wm(){
    local wm=""
    [ -n "$XDG_CURRENT_DESKTOP" ] && wm="$XDG_CURRENT_DESKTOP" && echo "$wm" && return 0
    hash wmctrl 2> /dev/null  && wm=$(wmctrl -m | awk '/Name:/ {print $2}')
    [ -n "$wm" ] && echo "$wm" && return 0
    wm="$(ps -e | grep -i "^.*wm\|i3\|awesome\|sway\|openbox\|blackbox\|fluxbox" | awk 'NR == 1 {print $4}')"
    [ -n "$wm" ] && echo "$wm" && return 0
    hash xprop 2> /dev/null && {
        local id="$(xprop -root -notype _NET_SUPPORTING_WM_CHECK 2> /dev/null | grep "id" | awk '{print $5}')"
        [ -n "$id" ] && wm="$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t | grep "_NET_WM_NAME" | awk '{gsub(/"/, "", $3); print $3 }')"
    }
    [ -n "$DESKTOP_SESSION" ] && wm="$DESKTOP_SESSION" && echo "$wm" | ~/bin/tolower | ~/bin/capitalize && return 0
    echo "$wm"
    return 0
}

# Is the screen already locked?
function locked(){
    local sclist=('i3lock' 'slock' 'xlock' 'light-locker' 'mate-screensaver-dialog' 'cinnamon-screensaver-pam-helper' 'slimlock' 'gnome-screensaver-dialog' 'xscreensaver')
    for p in "${sclist[@]}"; do
        [ $(pgrep -lfc "${p}") -gt 0 ] && return 0;
    done
    return 1;
}

# Reset locker kill running lock apps
function reset_locker(){
    local sclist=('i3lock' 'slock' 'xlock' 'light-locker' 'mate-screensaver-dialog' 'cinnamon-screensaver-pam-helper' 'slimlock' 'gnome-screensaver-dialog' 'xscreensaver')
    for p in "${sclist[@]}"; do
        [ $(pgrep -lfc "${p}") -gt 0 ] && stop_it "${p}"
    done
    return 0;
}

# builtin sleep version in bash
function snore(){
    [ -z "$1" ] && return 0
    local IFS
    [[ -n "${_snore_fd:-}" ]] || exec {_snore_fd}<> <(:)
    read ${1:+-t "$1"} -u $_snore_fd || :
}

# helper find normal icon fullname file path
function findNrmIconHelper(){
    [ -z "$1" ] && echo "" && return 1
    [ -z "$2" ] && echo "" && return 1
    [ -d "$1" ] && cd "${1}" && find . -name "${2}" | grep "svg\|png\|jpg" | cut -c 2- | head -n 1
    return 0
}

# helper find status icon fullname file path
function findStatIconHelper(){
    [ -z "$1" ] && echo "" && return 1
    [ -z "$2" ] && echo "" && return 1
    [ -d "$1" ] && cd "${1}" && find . -name "${2}" | grep "svg\|png\|jpg" | grep -i "status" | cut -c 2- | tail -n 1
    return 0
}

# find jpg icon fullname file path
function findJPGPath(){
    findNrmIconHelper "$1" "${2}.jpg" | grep "16"
    return 0
}

# find png icon fullname file path
function findPNGPath(){
    findNrmIconHelper "$1" "${2}.png" | grep "16"
    return 0
}

# find svg icon fullname file path
function findSVGPath(){
    findNrmIconHelper "$1" "${2}.svg"
    return 0
}

# find current icon theme name
function findIconThemeName(){
    local tn=""
    checkfor "dump_xsettings" && tn="$(dump_xsettings | grep "Net\/IconThemeName" | awk '{print $2}' | tr -d '"')"
    [ -z "$tn" ] && tn="$(gsettings get org.mate.interface icon-theme | tr -d "'")"
    [ -z "$tn" ] && tn="$(gsettings get org.gnome.desktop.interface icon-theme | tr -d "'")"
    echo "$tn"
    return 0
}

# find current icon theme path for search
function findIconThemePath(){
    [ -z "$1" ] && echo "" && return 1
    local tn="$1"
    local tp="/usr/share/icons/$tn"
    [ -d "$tp" ] && echo "$tp" && return 0
    tp="$HOME/.icons/$tn"
    [ -d "$tp" ] && echo "$tp" && return 0
    tp="$HOME/.local/share/icons/$tn"
    [ -d "$tp" ] && echo "$tp" && return 0
    echo ""
    return 1
}

# find icon path inside current icon theme
function FindIconPath(){
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo ""
        return 1
    fi
    local tp="$2"
    local nip=$(findNrmIconHelper "$tp" "${1}.svg" )
    [ -z "$nip" ] && nip=$(findNrmIconHelper "$tp" "${1}.png" | grep "16")
    [ -z "$nip" ] && nip=$(findNrmIconHelper "$tp" "${1}.jpg" | grep "16")
    [ -z "$nip" ] && echo "" && return 1
    echo "$tp$nip"
    return 0
}

# find icon path on fallback conditions
function FallbackiconPath(){
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo ""
        return 1
    fi
    local tp=""
    local nip=""
    for i in $(grep "nherit" "$2/index.theme" | cut -d"=" -f2 | sed -e 's/,/\n/g'); do
        tp=$(findIconThemePath "$i");
        nip=$(FindIconPath "$1" "$tp");
        [ ! -z "$nip" ] && echo "$nip" && return 0
    done
    echo ""
    return 1
}

# find icon path
function iconPath(){
    [ -z "$1" ] && echo "" && return 1
    local themePath="$(findIconThemePath "$(findIconThemeName)")"
    [ -z "$themePath" ] && echo "" && return 1
    local iconPath="$(FindIconPath "$1" "$themePath")"
    [ -z "$iconPath" ] && iconPath=$(FallbackiconPath "$1" "$themePath")
    echo "$iconPath"
    return 0
}

#!/usr/bin/env bash
# mylightson

# Description: Bash script that prevents the xautolock and display power
# management (DPMS) to be activated when you are watching offline movies or Flash/HTML5 Videos.
#
# It can detect mpv, mplayer, minitube, and VLC when they are playing too.
# Also, screensaver can be prevented when certain specified programs are running.
# Optionally delay the screensaver when specific outputs are connected.

# HOW TO USE: Start the script with the number of seconds you want the checks
# for fullscreen to be done. Example:
#
# "./mylightson 120 &" will Check every 120 seconds if any of the supported
# applications are fullscreen and delay screensaver and Power Management if so.

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

# LO_DEBUG=0 for NO output
# LO_DEBUG=1 for sleep prints
# LO_DEBUG=2 for everything
LO_DEBUG=0

# Modify these variables if you want this script to detect if MPV, Mplayer,
# VLC, Minitube, Totem or a web browser Flash/HTML5 Video.

# Names of programs which, when running, you wish to delay the screensaver.
# For example ('ardour2' 'gmpc').
LO_mandatoryApps=('cura' 'wineserver' 'dbgl' 'openscad' 'dgen' 'lutris' 'playonlinux' 'avidemux' 'synaptic' 'scummvm' 'flare' 'frozen-bubble' '0ad' 'TeamViewer' 'remmina' 'dosbox' 'wine' 'wget' 'curl' 'rsync' 'scp' 'sftp' 'youtube-dl')

# Names of programs which, when running, you wish to delay the screensaver.
# For example ('ardour2' 'gmpc').
LO_delayMediaApps=('vlc' 'celluloid' 'xplayer' 'bino' 'curlew' 'avidemux' 'mpv' 'smplayer' 'smtube' 'gmpc' 'ardour2' 'xine' 'totem' 'parole' 'qmmp' 'kaffeine' 'kmplayer' 'kdenlive' 'ffmpeg')

# Names of programs which, when using sound server, you wish to delay the screensaver.
LO_delayWebBasedApps=('firefox' 'LibreWolf' 'chrome' 'vivaldi' 'brave' 'chromium' 'epiphany' 'WebKit' 'opera' 'Iceweasel' 'surf' 'yandex_browser' 'luakit'  'midori' 'min ' 'falkon' 'slimjet' 'steam')

# Names of programs which, when using massive transfer, you wish to delay the screensaver.
LO_delayBusyApps=('pcmanfm' 'pcmanfm-qt' 'nautilus' 'dolphin' 'nemo' 'thunar' 'caja' 'mc' 'fff' 'nnn' 'ranger' 'vifm')

# Display outputs to check, display screensaver when they are connected.
# Run xrandr to show current monitor config.
LO_outputDevices=('HDMI1' 'VGA1' 'DP1' 'VIRTUAL1')

# DPMS settings in seconds, 600 seconds = 10 minutes.
# If you don't want to change DMPS settings, modify LO_DPMSControl to 0.
LO_DPMSControl=1
#LO_DPMSStandbyTime=600
#LO_DPMSSuspendTime=600
#LO_DPMSOffTime=600
LO_DPMSStandbyTime=180
LO_DPMSSuspendTime=600
LO_DPMSOffTime=600


# X11 Screen Saver Extension settings in seconds, 600 seconds = 10 minutes.
# If you don't want to change these settings, modify LO_X11ScvControl to 0.
LO_X11ScvControl=1
LO_X11ScvTimeout=180

# clean status file
function LO_state_clean(){
    [ -f "$LO_stateFile" ] && rm -f "$LO_stateFile"
    return 0
}

# LO_log feature
function LO_log(){
    [ $LO_DEBUG -eq 0 ] && return 0
    [ $LO_DEBUG -eq 2 ] && echo "$@" && log "$@" && return 0
    [ "$(echo "$@" | grep -c 'sleeping for')" -eq 1 ] && echo "$@" && log "$@"
    return 0
}

# save current state
function LO_save_state(){
    local st="$1"
    echo "$st" > "$LO_stateFile" && LO_log "LO_save_state(): State: $st" && return 0
}

# enable dpms
# NOTE the timeouts are set by laptop-mode.
function LO_enable_dpms(){
    xset +dpms
    LO_log "LO_enable_dpms(): DPMS ENABLED"
}

# disable dpms
function LO_disable_dpms(){
    xset -dpms
    LO_log "LO_disable_dpms(): DPMS DISABLED"
}

# query state
function LO_read_state(){
    [ -f "$LO_stateFile" ] && awk 'NR==1 { print $1 }' "$LO_stateFile" || echo "ENABLED"
}

# Turn X11 Xset to on
function LO_XSetOn(){
    if [ $(xset q | grep timeout | sed "s/cycle.*$//" | tr -cd '[:digit:]') -eq 0 ]; then
        LO_log "LO_XSetOn(): X11 Screensaver Extension ENABLED"
        xset s on
    fi
}

# Turn X11 Xset to off
function LO_XSetOff(){
    if [ $(xset q | grep timeout | sed "s/cycle.*$//" | tr -cd '[:digit:]') -ge 1 ]; then
        LO_log "LO_XSetOff(): X11 Screensaver Extension DISABLED"
        xset s off
    fi
}

# Find mandatory apps in fullscreen mode
function LO_hasMandatoryDelay(){
    for p1 in "${LO_mandatoryApps[@]}"; do
        [ $(pgrep -lfc "$p1") -gt 0 ] && LO_log "LO_hasMandatoryDelay(): YES Mandatory delay program $p1 found..." && return 0
    done
    return 1
}

# Find a screensaver process running
function LO_whichScvRunning(){
    [ $(pgrep -lfc xautolock) -gt 0 ] && echo "xautolock" && return 0
    [ $(pgrep -lfc gnome-screensaver) -gt 0 ] && echo "gnome-screensaver" && return 0
    [ $(pgrep -lfc mate-screensaver) -gt 0 ] && echo "mate-screensaver" && return 0
    [ $(pgrep -lfc cinnamon-screensaver) -gt 0 ] && echo "cinnamon-screensaver" && return 0
    [ $(pgrep -lfc xscreensaver) -gt 0 ] && echo "xscreensaver" && return 0
    [ $(pgrep -lfc xdg-screensaver) -gt 0 ] && echo "xdg-screensaver" && return 0
    echo ""
    return 0
}

# Detect if soundcard is being used
function LO_isSndCardBeingUsed(){
    grep RUNNING /proc/asound/card*/pcm*/sub*/status > /dev/null && LO_log "LO_isSndCardBeingUsed(): YES" && return 0
    LO_log "LO_isSndCardBeingUsed(): NO"
    return 1
}

# find a delay program using pulseaudio
function LO_whichUsingPulseaudio(){
    local nm_ps=""
    local str=""
    str=$(pacmd list-sink-inputs | grep "application.process.id" | awk '{print $3}' | sed 's/\"//g' | sed 's/\n//g')
    [ -z "$str" ] && echo "$nm_ps" && return 0
    local arr=( $str )
    for i in "${arr[@]}"; do
        nm_ps=$(ps -p "$i" -o comm=;)
        for p1 in "${LO_delayMediaApps[@]}"; do
            [ "$p1" = "$nm_ps" ] && echo "$nm_ps" && return 0
        done
        for p2 in "${LO_delayWebBasedApps[@]}"; do
            [ "$p2" = "$nm_ps" ] && echo "$nm_ps" && return 0
        done
    done
    echo "$nm_ps"
    return 0
}

# find a running online stream
function LO_detectOnlineMedia(){
    local tmp=""
    tmp=$(wmctrl -lxp 2> /dev/null | grep -si "lbry\|philo\|tubi\|tv\|fubo\|vrv\|disney\|prime vi\|hulu\|tube\|stream\|mp4\|mpeg\|mkv\|mpg\|webm\|vimeo\|anime\|divX\|flix\|rackle\|odcast\|cecast\|cine\|muu\|movie")
    if [ $? -eq 0 ]; then
        [ -n "$1" ] && [ $(echo "$tmp" | grep -ic "$1") -ge 1 ] && LO_log "LO_detectOnlineMedia(): YES $tmp" && return 0
        [ -z "$1" ] && LO_log "LO_detectOnlineMedia(): $tmp" && return 0 || return 1
    else
        return 1
    fi
}

# find a running online stream
function LO_fullScrWinID(){
    local oldIFS=$IFS
    IFS=$'\n'
    # Loop through every display looking for a fullscreen window.
    for d in $LO_displays; do
        for wID in $(DISPLAY=:${d} wmctrl -l | awk '{print $1}'); do
            [ $(DISPLAY=:${d} xprop -id "$wID" 2> /dev/null | grep -c _NET_WM_STATE_FULLSCREEN) -gt 0 ] && IFS=$oldIFS && echo "$wID" && return 0
        done
    done
    IFS=$oldIFS
    echo ""
    return 1
}

# find a running online stream
function LO_scrAboveWinID(){
    local oldIFS=$IFS
    IFS=$'\n'
    # Loop through every display looking for a above window.
    for d in $LO_displays; do
        for wID in $(DISPLAY=:${d} wmctrl -l | awk '{print $1}'); do
            [ $(DISPLAY=:${d} xprop -id "$wID" 2> /dev/null | grep -c _NET_WM_STATE_ABOVE) -gt 0 ] && IFS=$oldIFS && echo "$wID" && return 0
        done
    done
    IFS=$oldIFS
    echo ""
    return 1
}

# Check if active window is matched with user settings.
# This function covers the standard way to check apps in LO_hasDelayApp
function LO_runcheck(){
    [ $(echo "$1" | grep -ic "$2") -ge 1 ] && [ "$(pidof -s "$2")" ] && return 0
    if [[ "$1" = *$2* ]]; then
        [ "$(pidof -s "$2")" ] && return 0
    fi
    return 1
}

# find a delay program for a given window ID
function LO_hasDelayApp(){
    # active window ID must be passed as parameter
    [ -z "$1" ] && LO_log "LO_hasDelayApp(): Active Win ID parameter needed" &&  return 1
    
    # Get class/title of active window.
    local wClass="$(xprop -id "$1" 2> /dev/null | grep "WM_CLASS(STRING)")"
    
    # detect programs that need delay screensaver
    for p in "${LO_delayMediaApps[@]}"; do
        LO_runcheck "$wClass" "$p" && LO_log "LO_hasDelayApp(): YES $p fullscreen detected" && return 0
    done
    
    # detect web based apps that need delay screensaver
    for w in "${LO_delayWebBasedApps[@]}"; do
        LO_runcheck "$wClass" "$w" && LO_log "LO_hasDelayApp(): YES $w detected" && return 0
    done
    
    # Check if user want to detect Flash on Chrome.
    if [ $(echo "$wClass" | grep -ic "oogle-chrome") -gt 0 ]; then
        [ $(pgrep -lfc "(c|C)hrome --type=ppapi ") -ge 1 ] && LO_log "LO_hasDelayApp(): YES Google Chrome flash detected" && return 0
    fi
    
    # Check if user want to detect Flash on Chromium.
    if [ $(echo "$wClass" | grep -ic "hromium") -gt 0 ]; then
        [ $(pgrep -lfc ".*chromium.*flashp.*") -ge 1 ] && LO_log "LO_hasDelayApp(): YES Chromium flash detected" && return 0
    fi
    
    # Check if user want to detect HTML5 on Yandex browser.
    if [ $(echo "$wClass" | grep -ic "andex-browser") -gt 0 ]; then
        [ $(pgrep -lfc "yandex_browser") -ge 1 ] && LO_log "LO_hasDelayApp(): YES Yandex browser detected" && return 0
    fi
    
    # Check if user want to detect Flash on Firefox based browsers.
    if [ $(echo "$wClass" | grep -ic "plugin-container") -gt 0 ]; then
        [ "$(pidof -s plugin-container)" ] && LO_log "LO_hasDelayApp(): YES Firefox flash detected" && return 0
    fi
    
    # Check if user want to detect Flash on Opera.
    if [ $(echo "$wClass" | grep -ic "operapluginwrapper") -gt 0 ]; then
        [ $(pgrep -lfc "operapluginwrapper-native") -ge 1 ] && LO_log "LO_hasDelayApp(): YES Opera flash detected" && return 0
    fi
    
    # Check if user want to detect Flash on WebKit.
    if [ $(echo "$wClass" | grep -ic "WebKitPluginProcess") -gt 0 ]; then
        [ $(pgrep -lfc ".*WebKitPluginProcess.*flashp.*") -ge 1 ] && LO_log "LO_hasDelayApp(): YES Webkit flash detected" && return 0
    fi
    
    LO_log "LO_hasDelayApp(): NO applications detected"
    return 1
}

# check for fullscreen or above screen that set to trigger the delay
function LO_isFullScreenBeingUsed(){
    local wIDFull="$(LO_fullScrWinID)"
    local wID=""
    if [ -z "$wIDFull" ]; then
        LO_log "LO_isFullScreenBeingUsed(): NO fullscreen detected. Checking for Above windows..."
        # Above state is used in some window managers instead of fullscreen.
        local wIDAbov="$(LO_scrAboveWinID)"
        [ -z "$wIDAbov" ] && LO_log "LO_isFullScreenBeingUsed(): NO above screen detected" && return 1
        wID=$wIDAbov
    else
        wID=$wIDFull
    fi
    # if we reach this part at least one window id was found
    LO_log "LO_isFullScreenBeingUsed(): active Win ID=$wID"
    LO_detectOnlineMedia "$wID" && LO_log "LO_isFullScreenBeingUsed(): YES Fullscreen detected: streaming is running..." && return 0
    LO_hasDelayApp "$wID" && LO_log "LO_isFullScreenBeingUsed(): YES Fullscreen detected: the app is set to trigger the delay" && return 0
    LO_log "LO_isFullScreenBeingUsed(): Fullscreen detected: the app is UNKNOWN or NOT set to trigger the delay"
    return 1
}

#check for busy apps using massive transfer/downloads and other important tasks that need to be delayed
function LO_hasDelayBusyApps(){
    local tmp=""
    for p in "${LO_delayBusyApps[@]}" ; do
        case $p in
            caja*)
                tmp="$(lsof_p "$p" | grep -v "$p-\|fonts\|/proc\|/dev/pts\|/sys/dev\|/usr/share/caja")"
            ;;
            dolphin*)
                tmp="$(lsof_p "$p" | grep -v "$p-\|fonts\|/proc\|/dev/pts\|/sys/dev")"
            ;;
            nautilus*)
                tmp="$(lsof_p "$p" | grep -v "$p-\|fonts\|/proc\|/dev/pts\|/sys/dev\|/usr/share/nautilus")"
            ;;
            nemo*)
                tmp="$(lsof_p "$p" | grep -v "$p-\|fonts\|/proc\|/dev/pts\|/sys/dev\|/usr/share/nemo")"
            ;;
            pcmanfm*)
                tmp="$(lsof_p "$p" | grep -v "$p-\|fonts\|/proc\|/dev/pts\|/sys/dev\|/usr/share/pcmanfm")"
            ;;
            thunar*)
                tmp="$(lsof_p "$p" | grep -v "$p-\|fonts\|/proc\|/dev/pts\|/sys/dev\|/usr/share/thunar")"
            ;;
            mc*)
                tmp="$(lsof_p "$p" | grep -v "$p-\|fonts\|/proc\|/dev/pts\|/sys/dev")"
            ;;
            *)
                tmp="$(lsof_p "$p" )"
            ;;
        esac
        [ -n "$tmp" ] && LO_log "LO_hasDelayBusyApps(): YES $p found for delaying" && return 0
    done

    tmp="$(_lsof | grep -i "Downloads")"
    [ -n "$tmp" ] && LO_log "LO_hasDelayBusyApps(): YES Download in progress delaying" && return 0

    for p in "${LO_delayWebBasedApps[@]}" ; do
        case $p in
            firefox*)
                [ -z "$tmp" ] && tmp="$(lsof_p "$p" | grep -v "/tmp\|fonts\|/proc\|/dev/pts\|/sys/dev\|xpi\|startupCache\|omni\|\.mozilla")"
            ;;
            chrome*)
                [ -z "$tmp" ] && tmp="$(lsof_p "$p" | grep -v "$p\|/tmp\|fonts\|/proc\|/dev/pts\|/sys/dev\|omni\|chrom\|\.pki\|\.cache")"
            ;;
            chromium*)
                [ -z "$tmp" ] && tmp="$(lsof_p "$p" | grep -v "$p\|/tmp\|fonts\|/proc\|/dev/pts\|/sys/dev\|omni\|chrom\|\.pki\|\.cache")"
            ;;
            LibreWolf*)
                [ -z "$tmp" ] && tmp="$(lsof_p "$p" | grep -v "/tmp\|fonts\|/proc\|/dev/pts\|/sys/dev\|xpi\|startupCache\|omni\|\.librewolf\|AppImage\|fuse")"
                [ -z "$tmp" ] && tmp="$(lsof_p "librewolf" | grep -v "/tmp\|fonts\|/proc\|/dev/pts\|/sys/dev\|xpi\|startupCache\|omni\|\.librewolf\|AppImage\|fuse")"
            ;;
            *)
                [ -z "$tmp" ] && tmp="$(lsof_p "$p" | grep -v "$p\|/tmp\|fonts\|/proc\|/dev/pts\|/sys/dev\|omni\|\.pki\|\.cache")"
            ;;
        esac
        [ -n "$tmp" ] && LO_log "LO_hasDelayBusyApps(): YES $p found for delaying" && return 0
    done
    LO_log "LO_hasDelayBusyApps(): NO busy apps found for delaying"
    return 1
}

#check for output connections to disable xautolock and reset screensaver
function LO_hasDelayOutputConns(){
    local connOut="$(xrandr | grep " connected" | awk '{print $1}')"
    for out in "${LO_outputDevices[@]}" ; do
        [ $(echo "$connOut" | grep -ic "$out") -ge 1 ] && LO_log "LO_hasDelayOutputConns(): $out Output connection found for delaying" && return 0
    done
    LO_log "LO_hasDelayOutputConns(): NO output connections found for delaying"
    return 1
}

# disable xautolock + Xset + dpms off
function LO_disableScrXautolock(){
    if [ "$(LO_read_state)" == "DISABLED" ]; then
        LO_log "LO_disableScrXautolock(): xautolock screensaver already DISABLED..."
        return 0
    fi
    if [ "${1}" == "force" ]; then
        LO_log "LO_disableXautolock(): Shutting down xautolock daemon..."
        stop_it "xautolock" "stop"
    else
        LO_log "LO_disableScrXautolock(): delaying xautolock..."
        [ "$LO_scvpgm" = "xautolock" ] && xautolock -disable
    fi
    LO_disable_dpms
    LO_XSetOff
    LO_save_state "DISABLED"
}

# enable xautolock + Xset + dpms on
function LO_enableScrXautolock(){
    if [ "$(LO_read_state)" == "ENABLED" ] && [ "${1}" != "force" ]; then
        LO_log "LO_enableScrXautolock(): xautolock screensaver already ENABLED..."
        return 0
    fi
    
    if [ "${1}" == "force" ]; then
        stop_it "xautolock"
        LO_log "LO_enableScrXautolock(): (Re)/Starting xautolock daemon..."
        # xautolock -detectsleep -noclose -time 5 -locker "\"$HOME/bin/mylock\"" -notify 30 -notifier "\"$HOME/bin/mynotify\"" -killtime 10 -killer "\"$HOME/bin/mysuspend\"" &
        xautolock -detectsleep -noclose -time 3 -locker "\"$HOME/bin/mylock\"" -notify 30 -notifier "\"$HOME/bin/mynotify\"" &
        snore 0.5
    else
        xautolock -enable & disown
        LO_log "LO_enableScrXautolock(): xautolock ENABLED..."
    fi
    
    LO_enable_dpms
    LO_XSetOn
    
    # Setting DPMS.
    if [ $LO_DPMSControl -eq 1 ]; then
        LO_log "LO_enableScrXautolock(): LO_enableScrXautolock(): Setting DPMS Standby Time: $LO_DPMSStandbyTime, Suspend: $LO_DPMSSuspendTime, Off: $LO_DPMSOffTime"
        xset dpms $LO_DPMSStandbyTime $LO_DPMSSuspendTime $LO_DPMSOffTime
    fi
    
    # Setting X11 Screensaver Extension.
    if [ $LO_X11ScvControl -eq 1 ]; then
        LO_log "LO_enableScrXautolock(): Setting X11 Screensaver Extension to Timeout: $LO_DPMSStandbyTime $LO_DPMSSuspendTime"
        xset s $LO_DPMSStandbyTime $LO_DPMSSuspendTime
    fi
    
    LO_save_state "ENABLED"
}

# delay/disable other than xautolock
function LO_disableScvOther(){
    # Reset inactivity time counter so screensaver is not started.
    if [ "$LO_scvpgm" == "xscreensaver" ]; then
        LO_log "LO_disableScvOther(): delaying xscreensaver..."
        xscreensaver-command -deactivate > /dev/null
    fi
    if [ "$LO_scvpgm" == "kscreensaver" ]; then
        LO_log "LO_disableScvOther(): delaying kscreensaver..."
        qdbus org.freedesktop.ScreenSaver /ScreenSaver SimulateUserActivity > /dev/null
    fi
    if [ "$LO_scvpgm" == "gnome-screensaver" ]; then
        LO_log "LO_disableScvOther(): delaying gnome-screensaver..."
        dbus-send --session --dest=org.gnome.ScreenSaver --type=method_call /org/gnome/ScreenSaver org.gnome.ScreenSaver.SimulateUserActivity >/dev/null 2>&1
    fi
    if [ "$LO_scvpgm" == "cinnamon-screensaver" ]; then
        LO_log "LO_disableScvOther(): delaying cinnamon-screensaver..."
        dbus-send --session --dest=org.cinnamon.ScreenSaver --type=method_call /org/cinnamon/ScreenSaver org.cinnamon.ScreenSaver.SimulateUserActivity >/dev/null 2>&1
    fi
    if [ "$LO_scvpgm" == "mate-screensaver" ]; then
        LO_log "LO_disableScvOther(): delaying mate-screensaver..."
        dbus-send --session --dest=org.mate.ScreenSaver --type=method_call /org/mate/ScreenSaver org.mate.ScreenSaver.SimulateUserActivity >/dev/null 2>&1
    fi
    if [ $LO_xdgScvPresent -eq 1 ]; then
        LO_log "LO_disableScvOther(): trying to delay with xdg-screensaver..."
        xdg-screensaver reset
    fi
    
    # Reset gnome session idle timer.
    if [[ $LO_gsettingsPresent -eq 1 && $(gsettings get org.gnome.desktop.session idle-delay 2>/dev/null) ]]; then
        local sessionIdleDelay=$(gsettings get org.gnome.desktop.session idle-delay 2>/dev/null | sed "s/^.* //")
        if [[ $sessionIdleDelay -ge 1 ]]; then
            LO_log "LO_disableScvOther(): resetting gnome session..."
            gsettings set org.gnome.desktop.session idle-delay 0 2>/dev/null
            gsettings set org.gnome.desktop.session idle-delay "$sessionIdleDelay" 2>/dev/null
        fi
    fi
    LO_disable_dpms
    LO_XSetOff
    LO_save_state "DISABLED"
}

# enable other than xautolock
function LO_enableScvOther(){
    # Reset inactivity time counter so screensaver is not started.
    if [ "$LO_scvpgm" == "xscreensaver" ]; then
        LO_log "LO_enableScvOther(): delaying xscreensaver..."
        xscreensaver-command -activate > /dev/null
    else
        if [ $LO_xdgScvPresent -eq 1 ]; then
            LO_log "LO_enableScvOther(): trying to delay with xdg-screensaver..."
            xdg-screensaver reset
        fi
    fi
    
    LO_enable_dpms
    
    # Setting DPMS.
    if [ $LO_DPMSControl -eq 1 ]; then
        LO_log "LO_enableScvOther(): Setting DPMS Standby Time: $LO_DPMSStandbyTime, Suspend: $LO_DPMSSuspendTime, Off: $LO_DPMSOffTime"
        xset dpms $LO_DPMSStandbyTime $LO_DPMSSuspendTime $LO_DPMSOffTime
    fi
    
    LO_XSetOn
    
    # Setting X11 Screensaver Extension time and cycle.
    if [ $LO_X11ScvControl -eq 1 ]; then
        LO_log "LO_enableScvOther(): Setting X11 Screensaver Extension to Timeout: $LO_DPMSStandbyTime $LO_DPMSSuspendTime"
        xset s $LO_DPMSStandbyTime $LO_DPMSSuspendTime
    fi
    
    LO_save_state "ENABLED"
}

# disable xautolock/screensaver
function LO_disableScreensaver(){
    if [ "$LO_scvpgm" = "xautolock" ]; then
        LO_disableScrXautolock "force"
    else
        LO_disableScvOther
    fi
}

# enable xautolock/screensaver
function LO_enableScreensaver(){
    LO_log "LO_enableScreensaver(): Enabling screensaver $LO_scvpgm..."
    if [ "$LO_scvpgm" = "xautolock" ]; then
        LO_enableScrXautolock "force"
    else
        LO_enableScvOther
    fi
}

# Check for delay programs to disable xautolock/screensaver
function LO_delayScreensaver(){
    LO_log "LO_delayScreensaver(): Screensaver $LO_scvpgm detected ..."
    # disable screensaver if mandatory delay progs were found
    if LO_hasMandatoryDelay; then
        LO_log "LO_delayScreensaver(): Mandatory delay programs running..."
        LO_disableScreensaver
        return 0
    #else
    #    LO_log "LO_delayScreensaver(): NO Mandatory delay programs were found..."
    fi
    # disable screensaver if there are delay apps using sound card
    if LO_isSndCardBeingUsed; then
        local progName="$(LO_whichUsingPulseaudio)"
        if [ ! -z "$progName" ]; then
            LO_log "LO_delayScreensaver(): Delaying the screensaver because a delay program (or stream), \"$progName\", is running..."
            LO_disableScreensaver
            return 0
        #else
        #    LO_log "LO_delayScreensaver(): NO delay program (or stream) using sound card is running..."
        fi
    fi
    # disable screensaver if there are delay apps in fullscreen mode
    if LO_isFullScreenBeingUsed; then
        LO_log "LO_delayScreensaver(): Delaying the screensaver because a Fullscreen delay program is running..."
        LO_disableScreensaver
        return 0
    #else
    #    LO_log "LO_delayScreensaver(): NO delay program (or stream) in Fullscreen mode is running..."
    fi
    # disable screensaver if we have significant ouput connections
    if LO_hasDelayOutputConns; then
        LO_log "LO_delayScreensaver(): Delaying the screensaver because Output connections were found..."
        LO_disableScreensaver
        return 0
    #else
    #    LO_log "LO_delayScreensaver(): NO delay output connections detected..."
    fi
    # disable screensaver if we have relevant busy apps
    if LO_hasDelayBusyApps; then
        LO_log "LO_delayScreensaver(): Delaying the screensaver because Busy applications were found..."
        LO_disableScreensaver
        return 0
    #else
    #    LO_log "LO_delayScreensaver(): NO delay Busy applications detected..."
    fi
    
    LO_log "LO_delayScreensaver(): NO delay programs were detected for suspending screensaver..."
    
    # Since NO delay situations were detected we must enable screensaver if necessary
    local stt="$(LO_read_state)"
    LO_log "LO_delayScreensaver(): Current screensaver state = $stt "
    if [ "$stt" == "DISABLED" ]; then
        LO_enableScreensaver
        LO_log "LO_delayScreensaver(): running screensaver ENABLED..."
        return 0
    fi
}

# sleep for the next iteration
function LO_sleep(){
    if [ $LO_enableDynDelay -eq 0 ]; then
        LO_log "LO_sleep(): sleeping for $LO_delay"
        LO_log "--------------- loop done! ---------------"
        snore "$LO_delay"
        return 0
    fi
    local LO_systemSleepDelay=""
    local LO_sleepDelay=""
    if [ $LO_mateScvPresent -eq 1 ]; then
        if [ $LO_gsettingsPresent -eq 1 ]; then
            if [ "$(awk '/1/ { print $0 }' /sys/class/power_supply/ADP*/online || echo "0")" == "1" ]; then
                LO_systemSleepDelay=$(gsettings get org.mate.power-manager sleep-display-ac 2>/dev/null)
            else
                LO_systemSleepDelay=$(gsettings get org.mate.power-manager sleep-display-battery 2>/dev/null)
            fi
        fi
    elif [ $LO_gnomeScvPresent -eq 1 ]; then
        if [ $LO_gsettingsPresent -eq 1 ]; then
            if [ "$(awk '/1/ { print $0 }' /sys/class/power_supply/ADP*/online || echo "0")" == "1" ]; then
                LO_systemSleepDelay=$(gsettings get org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 2>/dev/null)
            else
                LO_systemSleepDelay=$(gsettings get org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout 2>/dev/null)
            fi
        fi
    fi
    if [ $(echo "$LO_systemSleepDelay" | egrep -c "^[0-9]+$") -ge 1 ]; then
        if [ $LO_systemSleepDelay -le $(($LO_defaultSleepDelay)) ]; then
            LO_sleepDelay=$LO_defaultSleepDelay
        else
            LO_sleepDelay=$(($LO_systemSleepDelay))
        fi
    else
        LO_sleepDelay=$LO_defaultSleepDelay
    fi
    LO_log "LO_sleep(): sleeping for $LO_sleepDelay (system idle timeout is $LO_systemSleepDelay)"
    LO_log "--------------- loop done! ---------------"
    snore "$LO_sleepDelay"
}

# If we are using custom xautolock configs, we can kill all other screensavers daemons
function LO_disableOtherSS(){
    stop_it "cinnamon-screensaver"
    stop_it "mate-screensaver"
    stop_it "gnome-screensaver"
    stop_it "xscreensaver"
    stop_it "xdg-screensaver"
    return 0
}

# required binaries that must be present in order to run
precheck "xset"
precheck "wmctrl"
precheck "xvinfo"
precheck "xprop"
precheck "xrandr"
precheck "bc"
precheck "xautolock"
precheck "pulseaudio"
precheck "awk"
precheck "grep"

# Enable use of dynamic delay via gsettings
LO_enableDynDelay=0
LO_delay=""

# This is actually the minimum allowed dynamic delay.
# Also the default (if everything else fails)
LO_defaultSleepDelay=150

# If passed argument is not integer quit.
if [ ! -z "$1" ]; then
    if [[ $1 = *[^0-9]* ]]; then
        LO_log "The Argument \"$1\" is not valid, not an integer."
        echo "The Argument \"$1\" is not valid, not an integer"
        echo "Please use the time in seconds you want the checks to repeat."
        echo "You want it to be ~10 seconds less than the time it takes your screensaver or DPMS to activate"
        exit 1
    else
        LO_delay=$1
    fi
elif [ $LO_enableDynDelay -eq 0 ]; then # if DynDelay is deactivated we can use default delay time.
    LO_delay=$LO_defaultSleepDelay
fi

# Check for screensaver apps on your system
LO_xautolockPresent="$(findutil "xautolock" > /dev/null && echo "1" || echo "0")"
LO_gsettingsPresent="$(findutil "gsettings" > /dev/null && echo "1" || echo "0")"
LO_xdgScvPresent="$(findutil "xdg-screensaver" > /dev/null && echo "1" || echo "0")"
LO_mateScvPresent="$(findutil "mate-screensaver" > /dev/null && echo "1" || echo "0")"
LO_gnomeScvPresent="$(findutil "gnome-screensaver" > /dev/null && echo "1" || echo "0")"
LO_cinnamonScvPresent="$(findutil "cinnamon-screensaver" > /dev/null && echo "1" || echo "0")"
LO_xScvPresent="$(findutil "xscreensaver" > /dev/null && echo "1" || echo "0")"

# Search for a running screensaver program
LO_scvpgm=$(LO_whichScvRunning)

# xautolock is default and also fallback option
if [ -z "$LO_scvpgm" ]; then
    [ $LO_xautolockPresent -eq 1 ] && LO_scvpgm="xautolock"
fi

# If argument empty, use dynamic delay.
if [ -z "$LO_delay" ]; then
    LO_enableDynDelay=1
    LO_log "NO delay specified, dynamic delay activated"
fi

# config vars
LO_scriptName="${0##*/}"
LO_scriptBaseName="${LO_scriptName%%.*}"
LO_scriptFPath="$(dirname "$(readlink -f $0)")/${LO_scriptName}"
LO_stateFile="${XDG_CACHE_HOME}/${LO_scriptBaseName}_${USER}_state.txt"
trap 'rm -f "$LO_stateFile"; exit' INT TERM EXIT ERR

# enumerate all the attached screens
LO_displays=$(xvinfo | awk -F'#' '/^screen/ {print $2}' | xargs)

# Kill older instances of this job
kill_older

# clean LO_state file
LO_state_clean

# start-up LO_log messages
LO_log "[ START ] $LO_scriptName  "
LO_log "LO_stateFile............: $LO_stateFile"
LO_log "LO_scriptName...........: $LO_scriptName"
LO_log "LO_scriptFPath..........: $LO_scriptFPath"
LO_log "LO_defaultSleepDelay....: $LO_defaultSleepDelay"
LO_log "LO_enableDynDelay.......: $LO_enableDynDelay"
LO_log "LO_delay................: $LO_delay"
LO_log "LO_xautolockPresent.....: $LO_xautolockPresent"
LO_log "LO_gsettingsPresent.....: $LO_gsettingsPresent"
LO_log "LO_xdgScvPresent........: $LO_xdgScvPresent"
LO_log "LO_mateScvPresent.......: $LO_mateScvPresent"
LO_log "LO_gnomeScvPresent......: $LO_gnomeScvPresent"
LO_log "LO_cinnamonScvPresent...: $LO_cinnamonScvPresent"
LO_log "LO_xScvPresent..........: $LO_xScvPresent"
LO_log "Original Screensaver detected = $LO_scvpgm"

# Starting with ENABLED state
LO_log "Saving initial state = ENABLED"
LO_save_state "ENABLED"

# Starting procedures for xautolock daemon
if [ "$LO_scvpgm" = "xautolock" ]; then
    LO_log "Starting xautolock daemon..."
    LO_enableScrXautolock "force"
    snore 2
fi

# On the first time kill all lockers remaining
reset_locker

# initial value for suspend pid
LO_SPID=""
LO_idle="0"

# Initiate monitoring
while true; do
    # workaround due to issues on xautolock
    # if screen is already locked do proper suspend both on screen and laptop 
    if locked; then
        let LO_idle=$(xprintidle)/1000
        LO_log "main(): Screen is already locked... Idle =  $LO_idle / Suspend time = $LO_DPMSSuspendTime"
        if [ -z "$LO_SPID" ]; then
            if [ $LO_idle -gt $LO_DPMSSuspendTime ]; then
                LO_log "main(): Suspend time elapsed. Suspending..."
                nice -3 $HOME/bin/mysuspend & disown
                LO_SPID="$!"
                LO_log "main(): Suspend PID=$LO_SPID"
            fi
        fi
    else
        LO_SPID=""
        LO_idle="0"
        #LO_scvpgm=$(LO_whichScvRunning)
        [ "$LO_scvpgm" = "xautolock" ] && LO_disableOtherSS
        LO_delayScreensaver
    fi
    LO_sleep $LO_delay
done
trap - INT TERM EXIT ERR
exit 0
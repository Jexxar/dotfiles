#!/usr/bin/env bash
# mylightson

# Description: Bash script that prevents the xautolock and display power
# management (DPMS) to be activated when you are watching offline movies or Flash/HTML5 Videos.
#
# It can detect mpv, mplayer, minitube, and VLC when they are playing too.
# Also, screensaver can be prevented when certain specified programs are running.
# Optionally delay the screensaver when specific outputs are connected.

# HOW TO USE: Start the script with the number of seconds you want the checks
# for fullscreen to be done. Example:
#
# "./mylightson 120 &" will Check every 120 seconds if any of the supported
# applications are fullscreen and delay screensaver and Power Management if so.

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

# LO_DEBUG=0 for NO output
# LO_DEBUG=1 for sleep prints
# LO_DEBUG=2 for everything
LO_DEBUG=0

# Modify these variables if you want this script to detect if MPV, Mplayer,
# VLC, Minitube, Totem or a web browser Flash/HTML5 Video.

# Names of programs which, when running, you wish to delay the screensaver.
# For example ('ardour2' 'gmpc').
LO_mandatoryApps=('cura' 'wineserver' 'dbgl' 'openscad' 'dgen' 'lutris' 'playonlinux' 'avidemux' 'synaptic' 'scummvm' 'flare' 'frozen-bubble' '0ad' 'TeamViewer' 'remmina' 'dosbox' 'wine')

# Names of programs which, when running, you wish to delay the screensaver.
# For example ('ardour2' 'gmpc').
LO_delayMediaApps=('vlc' 'celluloid' 'xplayer' 'bino' 'curlew' 'avidemux' 'mpv' 'smplayer' 'smtube' 'gmpc' 'ardour2' 'xine' 'totem' 'parole' 'qmmp' 'kaffeine' 'kmplayer' 'kdenlive' 'ffmpeg')

# Names of programs which, when using sound server, you wish to delay the screensaver.
LO_delayWebBasedApps=('chrome' 'firefox' 'opera' 'Iceweasel' 'surf' 'yandex_browser' 'luakit' 'WebKit' 'vivaldi' 'brave' 'chromium' 'epiphany' 'youtube-dl' 'smtube' 'midori' 'min' 'falkon' 'slimjet' 'steam')

# Display outputs to check, display screensaver when they are connected.
# Run xrandr to show current monitor config.
LO_outputPattern=('HDMI1')

# DPMS settings in seconds, 600 seconds = 10 minutes.
# If you don't want to change DMPS settings, modify LO_DPMSControl to 0.
LO_DPMSControl=1
LO_DPMSStandbyTime=600
LO_DPMSSuspendTime=600
LO_DPMSOffTime=600

# X11 Screen Saver Extension settings in seconds, 600 seconds = 10 minutes.
# If you don't want to change these settings, modify LO_X11ScrSvrControl to 0.
LO_X11ScrSvrControl=1
LO_X11ScrSvrTimeout=600


# clean status file
function LO_state_clean() {
    if [ -f "$LO_stateFile" ]; then
        rm -f "$LO_stateFile"
    fi
    return 0
}

# LO_log feature
function LO_log() {
    if [ $LO_DEBUG -eq 2 ]; then
        echo "$@"
        log "$@" 
    elif [ $LO_DEBUG -eq 1 ]; then
        if [ "$(echo "$@" | grep -c 'sleeping for')" -eq 1 ]; then
            echo "$@"
            log "$@"
        fi
    fi
}

# save current state
function LO_save_state() {
    local st="$1"
    echo "$st" > "$LO_stateFile"
}

# enable dpms
# NOTE the timeouts are set by laptop-mode.
function LO_enable_dpms() {
    xset +dpms
    LO_log "LO_enable_dpms(): DPMS ENABLED"
}

# disable dpms
function LO_disable_dpms() {
    xset -dpms
    LO_log "LO_disable_dpms(): DPMS DISABLED"
}

# query state
function LO_read_state() {
    if [ -f "$LO_stateFile" ]; then
         awk '{ print $0 }' "$LO_stateFile"
    else
        echo "ENABLED"
    fi
}

# Turn X11 Xset to on 
function LO_XSetOn() {
    if [ $(xset q | grep timeout | sed "s/cycle.*$//" | tr -cd '[:digit:]') -eq 0 ]; then
        LO_log "LO_XSetOn(): X11 Screensaver Extension ENABLED"
        xset s on
    fi
}

# Turn X11 Xset to off 
function LO_XSetOff() {
    if [ $(xset q | grep timeout | sed "s/cycle.*$//" | tr -cd '[:digit:]') -ge 1 ]; then
        LO_log "LO_XSetOff(): X11 Screensaver Extension DISABLED"
        xset s off
    fi
}

# Find mandatory apps in fullscreen mode
function LO_hasMandatoryDelay() {
    for p1 in "${LO_mandatoryApps[@]}"; do
        if [ $(pgrep -lfc "${p1}") -gt 0 ] ; then
            LO_log "LO_hasMandatoryDelay(): mandatory delay program $p1 found..."
            return 0
        fi
    done
    return 1
}

# Find a screensaver process running
function LO_whichScrSvrRunning() {
    [ $(pgrep -lfc xautolock) -gt 0 ] && echo "xautolock" && return 0
    [ $(pgrep -lfc gnome-screensaver) -gt 0 ] && echo "gnome-screensaver" && return 0
    [ $(pgrep -lfc mate-screensaver) -gt 0 ] && echo "mate-screensaver" && return 0
    [ $(pgrep -lfc cinnamon-screensaver) -gt 0 ] && echo "cinnamon-screensaver" && return 0
    [ $(pgrep -lfc xscreensaver) -gt 0 ] && echo "xscreensaver" && return 0
    [ $(pgrep -lfc xdg-screensaver) -gt 0 ] && echo "xdg-screensaver" && return 0
    echo ""
    return 0
}

# Detect if soundcard is being used
function LO_isSndCardBeingUsed() {
    if grep RUNNING /proc/asound/card*/pcm*/sub*/status > /dev/null; then
        LO_log "LO_isSndCardBeingUsed(): YES"
        return 0
    else
        LO_log "LO_isSndCardBeingUsed(): NO"
        return 1
    fi
}

# find a delay program using pulseaudio
function LO_whichUsingPulseaudio() {
    local nm_ps=""
    local str=""
    str=$(pacmd list-sink-inputs | grep "application.process.id" | awk '{print $3}' | sed 's/\"//g' | sed 's/\n//g')
    [ -z "$str" ] && echo "$nm_ps" && return 0
    local arr=( $str )
    for i in "${arr[@]}"; do 
        nm_ps=$(ps -p "$i" -o comm=;)
        for p1 in "${LO_delayMediaApps[@]}"; do
            if [ "$p1" = "$nm_ps" ]; then
                echo "$nm_ps"
                return 0
            fi
        done
        for p2 in "${LO_delayWebBasedApps[@]}"; do
            if [ "$p2" = "$nm_ps" ]; then
                echo "$nm_ps"
                return 0
            fi
        done
    done
    echo "$nm_ps"
    return 0
}

# find a running online stream
function LO_detectOnlineMedia() {
    local tmp=""
    tmp=$(wmctrl -lx 2> /dev/null | grep -si "youtube\|stream\|mp4\|mpeg\|mkv\|mpg\|webm\|vimeo\|anime\|divX\|flix\|rackle\|odcast\|cecast\|cine\|muu\|movie")
    if [ $? -eq 0 ] ; then 
        LO_log "LO_detectOnlineMedia(): $tmp"
        return 0
    fi
    return 1
}

# find a running online stream
function LO_fullScrWinID() {
    local oldIFS=$IFS
    IFS=$'\n'
    # Loop through every display looking for a fullscreen window.
    for display in $LO_displays; do
        local allWinID=""
        allWinID=$(DISPLAY=:${display} wmctrl -l | awk '{print $1}')
        for oneWinID in $allWinID; do
            qtFullScr=$(DISPLAY=:${display} xprop -id "$oneWinID" 2> /dev/null | grep -c _NET_WM_STATE_FULLSCREEN)
            if [ $qtFullScr -gt 0 ] ; then 
                IFS=$oldIFS
                echo "$oneWinID"
                return 0
            fi
        done
    done
    IFS=$oldIFS
    echo ""
    return 1
}

# find a running online stream
function LO_scrAboveWinID() {
    local oldIFS=$IFS
    IFS=$'\n'
    # Loop through every display looking for a above window.
    for display in $LO_displays; do
        local allWinID=""
        allWinID=$(DISPLAY=:${display} wmctrl -l | awk '{print $1}')
        for oneWinID in $allWinID; do
            qtAboveScr=$(DISPLAY=:${display} xprop -id "$oneWinID" 2> /dev/null | grep -c _NET_WM_STATE_ABOVE)
            if [ $qtAboveScr -gt 0 ] ; then 
                IFS=$oldIFS
                echo "$oneWinID"
                return 0
            fi
        done
    done
    IFS=$oldIFS
    echo ""
    return 1
}

# Check if active window is matched with user settings.
# This function covers the standard way to check apps in LO_hasDelayApp
function LO_runcheck() {
    if [[ "$1" = *$2* ]]; then
        if [ "$(pidof -s "$2")" ]; then
            return 0
        fi
    fi
    return 1
}

# find a delay program for a given window ID
function LO_hasDelayApp() {
    # active window ID must be passed as parameter
    if [ -z "$1" ]; then
        LO_log "LO_hasDelayApp(): Active Win ID parameter needed"
        return 1
    else
        local winID=$1
    fi
    # Get title of active window.
    local activWinTitle="$(xprop -id "$winID" 2> /dev/null | grep "WM_CLASS(STRING)")"
    # Check if user want to detect HTML5 on Chrome.
    if [[ "$activWinTitle" = *oogle-chrome* ]]; then
        # Check if Chrome process is running.
        # chrome_process=`pgrep -lfc "(c|C)hrome --type=gpu-process "
        chrome_process=$(pgrep -lfc "(c|C)hrome")
        if [[ $chrome_process -ge 1 ]]; then
            LO_log "LO_hasDelayApp(): chrome html5 detected"
            return 0
        fi
    fi
    
    # Check if user want to detect HTML5 on Chromium.
    if [[ "$activWinTitle" == *hromium* ]]; then
        # Check if Chromium process is running.
        if [[ $(pgrep -lfc "chromium") -ge 1 ]]; then
            LO_log "LO_hasDelayApp(): chromium html5 detected"
            return 0
        fi
    fi
    
    # Check if user want to detect HTML5 on Yandex browser.
    if [[ "$activWinTitle" == *andex-browser* ]]; then
        # Check if Yandex browser process is running.
        if [[ $(pgrep -lfc "yandex_browser") -ge 1 ]]; then
            LO_log "LO_hasDelayApp(): Yandex browser detected"
            return 0
        fi
    fi
    
    # detect browsers that need delay screensaver
    for wapp in "${LO_delayWebBasedApps[@]}"; do
        if LO_runcheck "$activWinTitle" "$wapp" ; then
            LO_log "LO_hasDelayApp(): $wapp detected"
            return 0
        fi
    done
    
    # detect Flash on Firefox.
    if [[ "$activWinTitle" = *unknown* || "$activWinTitle" = *plugin-container* ]]; then
        # Check if plugin-container process is running.
        if [ "$(pidof -s plugin-container)" ]; then
            LO_log "LO_hasDelayApp(): firefox flash detected"
            return 0
        fi
    fi
    # detect Flash on Chromium.
    if [[ "$activWinTitle" = *exe* || "$activWinTitle" = *hromium* ]]; then
        # Check if Chromium Flash process is running.
        flash_process=$(pgrep -lfc ".*chromium.*flashp.*")
        if [[ $flash_process -ge 1 ]]; then
            LO_log "LO_hasDelayApp(): chromium flash detected"
            return 0
        fi
    fi
    # detect Flash on Chromium.
    if [[ "$activWinTitle" = *hromium* ]]; then
        # Check if Chromium pepper Flash process is running.
        chromium_process=$(pgrep -lfc "chromium(|-browser) --type=ppapi ")
        if [[ $chromium_process -ge 1 ]]; then
            LO_log "LO_hasDelayApp(): chromium pepper flash detected"
            return 0
        fi
    fi
    # detect Flash on Chrome.
    if [[ "$activWinTitle" = *oogle-chrome* ]]; then
        # Check if Chrome pepper Flash process is running.
        chrome_process=$(pgrep -lfc "(c|C)hrome --type=ppapi ")
        if [[ $chrome_process -ge 1 ]]; then
            LO_log "LO_hasDelayApp(): chrome flash detected"
            return 0
        fi
    fi
    # detect Flash on Opera.
    if [[ "$activWinTitle" = *operapluginwrapper* ]]; then
        # Check if Opera flash process is running.
        flash_process=$(pgrep -lfc operapluginwrapper-native)
        if [[ $flash_process -ge 1 ]]; then
            LO_log "LO_hasDelayApp(): opera flash detected"
            return 0
        fi
    fi
    # detect Flash on WebKit.
    if [[ "$activWinTitle" = *WebKitPluginProcess* ]]; then
        # Check if WebKit Flash process is running.
        flash_process=$(pgrep -lfc ".*WebKitPluginProcess.*flashp.*")
        if [[ $flash_process -ge 1 ]]; then
            LO_log "LO_hasDelayApp(): webkit flash detected"
            return 0
        fi
    fi
    # detect MPlayer 
    if [[ "$activWinTitle" = *mplayer* || "$activWinTitle" = *MPlayer* ]]; then
        # Check if MPlayer is running.
        if [ "$(pidof -s mplayer)" ]; then
            LO_log "LO_hasDelayApp(): mplayer detected"
            return 0
        fi
    fi

    # detect programs that need delay screensaver
    for prog in "${LO_delayMediaApps[@]}"; do
        if LO_runcheck "$activWinTitle" "$prog" ; then
            LO_log "LO_hasDelayApp(): $prog fullscreen detected"
            return 0
        fi
    done

    LO_log "LO_hasDelayApp(): NO application fullscreen detected"
    return 1
}

# check for fullscreen or above screen that set to trigger the delay
function LO_isFullScreenBeingUsed() {
    local activWinFullscreenID=""
    local activeWinID=""
    local activWinAboveID=""
    activWinFullscreenID=$(LO_fullScrWinID)
    if [ -z "$activWinFullscreenID" ]; then
        LO_log "LO_isFullScreenBeingUsed(): NO fullscreen detected"
        activWinAboveID=$(LO_scrAboveWinID)
        if [ -z "$activWinAboveID" ]; then 
            LO_log "LO_isFullScreenBeingUsed(): NO above screen detected"
            return 1
        else
            activeWinID=$activWinAboveID
        fi
    else
        activeWinID=$activWinFullscreenID
    fi
    
    # Above state is used in some window managers instead of fullscreen.
    # if we reach this part at least one window id was found
    LO_log "LO_isFullScreenBeingUsed(): active Win ID=$activeWinID"
    
    if LO_detectOnlineMedia; then 
        LO_log "LO_isFullScreenBeingUsed(): Fullscreen detected: streaming is running..."
        return 0
    fi
    if LO_hasDelayApp "$activeWinID"; then 
        LO_log "LO_isFullScreenBeingUsed(): Fullscreen detected: the app is set to trigger the delay"
        return 0
    fi
    
    LO_log "LO_isFullScreenBeingUsed(): Fullscreen detected: the app is UNKNOWN or NOT set to trigger the delay"
    return 1
}

#check for output connections to disable xautolock and reset screensaver
function LO_hasDelayOutputConns() {
    local oldIFS=$IFS
    local output=""
    declare -A connOutput
    while read line
    do
        IFS="=" read -a info <<< "$line"
        if [[ "${info[0]}" = "output" ]]; then
            output=${info[1]}
        elif [[ "${info[0]}" = "connected" && "${info[1]}" = "connected" ]]; then
            connOutput["${output}"]="connected"
        fi
    done < <(xrandr | sed -rn "s/^([^ ]+)[ ]+((dis)?connected)[ ]+(primary)?[ ]*([0-9]+x[0-9]+\+[0-9]+\+[0-9]+)?[ ]*.+$/output=\1\nconnected=\2\nignore=\3\nprimary=\4\nresolution=\5/p")
    IFS=$oldIFS
    for out in "${LO_outputPattern[@]}" ; do
        if [[ ${connOutput["$out"]} = "connected" ]]; then
            echo "$out"
            unset connOutput
            return 0
        fi
    done
    echo ""
    unset connOutput
    return 1
}

# disable xautolock + Xset + dpms off
function LO_disableScrXautolock() {
    if [ "$(LO_read_state)" == "DISABLED" ]; then
        LO_log "LO_disableScrXautolock(): xautolock screensaver already DISABLED..."
        return 0
    fi
    if [ "${1}" == "force" ]; then
        LO_log "LO_disableXautolock(): Shutting down xautolock daemon..."
        stop_it "xautolock"
    else
        LO_log "LO_disableScrXautolock(): delaying xautolock..."
        [ "$LO_screenSaverProgram" = "xautolock" ] && xautolock -disable
    fi
    LO_disable_dpms
    LO_XSetOff
    LO_save_state "DISABLED"
}

# enable xautolock + Xset + dpms on
function LO_enableScrXautolock() {
    if [ "$(LO_read_state)" == "ENABLED" ] && [ "${1}" != "force" ]; then
        LO_log "LO_enableScrXautolock(): xautolock screensaver already ENABLED..."
        return 0
    fi
    
    if [ "${1}" == "force" ]; then
        stop_it "xautolock"
        LO_log "LO_enableScrXautolock(): (Re)/Starting xautolock daemon..."
        xautolock -detectsleep -noclose -time 5 -locker "\"$HOME/bin/mylock\"" -notify 10 -notifier "\"$HOME/bin/mynotify\"" -killtime 10 -killer "\"$HOME/bin/mysuspend\"" &
        snore 0.5
    else
        xautolock -enable
        LO_log "LO_enableScrXautolock(): xautolock ENABLED..."
    fi
    
    LO_enable_dpms
    LO_XSetOn

    # Setting DPMS.
    if [ $LO_DPMSControl -eq 1 ]; then
        LO_log "LO_enableScrXautolock(): LO_enableScrXautolock(): Setting DPMS Standby Time: $LO_DPMSStandbyTime, Suspend: $LO_DPMSSuspendTime, Off: $LO_DPMSOffTime"
        xset dpms $LO_DPMSStandbyTime $LO_DPMSSuspendTime $LO_DPMSOffTime
    fi
    
    # Setting X11 Scrensaver Extension.
    if [ $LO_X11ScrSvrControl -eq 1 ]; then
        LO_log "LO_enableScrXautolock(): Setting X11 Scrensaver Extension to Timeout: $LO_X11ScrSvrTimeout"
        xset s $LO_X11ScrSvrTimeout
    fi

    LO_save_state "ENABLED"
}

# delay/disable other than xautolock
function LO_disableScrSvrOther() {
    # Reset inactivity time counter so screensaver is not started.
    if [ "$LO_screenSaverProgram" == "xscreensaver" ]; then
        LO_log "LO_disableScrSvrOther(): delaying xscreensaver..."
        xscreensaver-command -deactivate > /dev/null
    elif [ "$LO_screenSaverProgram" == "kscreensaver" ]; then
        LO_log "LO_disableScrSvrOther(): delaying kscreensaver..."
        qdbus org.freedesktop.ScreenSaver /ScreenSaver SimulateUserActivity > /dev/null
    elif [ "$LO_screenSaverProgram" == "gnome-screensaver" ]; then
        LO_log "LO_disableScrSvrOther(): delaying gnome-screensaver..."
        dbus-send --session --dest=org.gnome.ScreenSaver --type=method_call /org/gnome/ScreenSaver org.gnome.ScreenSaver.SimulateUserActivity >/dev/null 2>&1
    elif [ "$LO_screenSaverProgram" == "cinnamon-screensaver" ]; then
        LO_log "LO_disableScrSvrOther(): delaying cinnamon-screensaver..."
        dbus-send --session --dest=org.cinnamon.ScreenSaver --type=method_call /org/cinnamon/ScreenSaver org.cinnamon.ScreenSaver.SimulateUserActivity >/dev/null 2>&1
    elif [ "$LO_screenSaverProgram" == "mate-screensaver" ]; then
        LO_log "LO_disableScrSvrOther(): delaying mate-screensaver..."
        dbus-send --session --dest=org.mate.ScreenSaver --type=method_call /org/mate/ScreenSaver org.mate.ScreenSaver.SimulateUserActivity >/dev/null 2>&1
    else
        if [ $LO_xdgScrSvrPresent -eq 1 ]; then
            LO_log "LO_disableScrSvrOther(): trying to delay with xdg-screensaver..."
            xdg-screensaver reset
        fi
    fi

    local sessionIdleDelay
    # Reset gnome session idle timer.
    if [[ $LO_gsettingsPresent -eq 1 && $(gsettings get org.gnome.desktop.session idle-delay 2>/dev/null) ]]; then
        sessionIdleDelay=$(gsettings get org.gnome.desktop.session idle-delay 2>/dev/null | sed "s/^.* //")
        if [[ $sessionIdleDelay -ge 1 ]]; then
            LO_log "LO_disableScrSvrOther(): resetting gnome session..."
            gsettings set org.gnome.desktop.session idle-delay 0 2>/dev/null
            gsettings set org.gnome.desktop.session idle-delay "$sessionIdleDelay" 2>/dev/null
        fi
    fi
    LO_disable_dpms
    LO_XSetOff
    LO_save_state "DISABLED"
}

# enable other than xautolock
function LO_enableScrSvrOther() {
    # Reset inactivity time counter so screensaver is not started.
    if [ "$LO_screenSaverProgram" == "xscreensaver" ]; then
        LO_log "LO_enableScrSvrOther(): delaying xscreensaver..."
        xscreensaver-command -activate > /dev/null
    else
        if [ $LO_xdgScrSvrPresent -eq 1 ]; then
            LO_log "LO_enableScrSvrOther(): trying to delay with xdg-screensaver..."
            xdg-screensaver reset
        fi
    fi

    LO_enable_dpms
    
    # Setting DPMS.
    if [ $LO_DPMSControl -eq 1 ]; then
        LO_log "LO_enableScrSvrOther(): Setting DPMS Standby Time: $LO_DPMSStandbyTime, Suspend: $LO_DPMSSuspendTime, Off: $LO_DPMSOffTime"
        xset dpms $LO_DPMSStandbyTime $LO_DPMSSuspendTime $LO_DPMSOffTime
    fi
    
    LO_XSetOn

    # Setting X11 Scrensaver Extension.
    if [ $LO_X11ScrSvrControl -eq 1 ]; then
        LO_log "LO_enableScrSvrOther(): Setting X11 Scrensaver Extension to Timeout: $LO_X11ScrSvrTimeout"
        xset s $LO_X11ScrSvrTimeout
    fi
    
    LO_save_state "ENABLED"
}

# disable xautolock/screensaver
function LO_disableScreensaver() {
    if [ "$LO_screenSaverProgram" = "xautolock" ]; then
        LO_disableScrXautolock "force"
    else
        LO_disableScrSvrOther
    fi
}

# enable xautolock/screensaver
function LO_enableScreensaver() {
    if [ "$LO_screenSaverProgram" = "xautolock" ]; then
        LO_enableScrXautolock "force"
    else
        LO_enableScrSvrOther
    fi
}

# Check for delay programs to disable xautolock/screensaver
function LO_delayScreensaver() {
    LO_log "LO_delayScreensaver(): Scrensaver $LO_screenSaverProgram detected ..."
    # disable screensaver if mandatory delay progs were found
    if LO_hasMandatoryDelay; then 
        LO_log "LO_delayScreensaver(): Delaying the screensaver because a mandatory delay program is running..."
        LO_disableScreensaver 
        return 0
    else
        LO_log "LO_delayScreensaver(): NO mandatory delay programs were found..."
    fi
    # disable screensaver if there are delay apps using sound card
    if LO_isSndCardBeingUsed; then 
        local progName="$(LO_whichUsingPulseaudio)"
        if [ ! -z "$progName" ]; then 
            LO_log "LO_delayScreensaver(): Delaying the screensaver because a delay program (or stream), \"$progName\", is running..."
            LO_disableScreensaver 
            return 0
        else
            LO_log "LO_delayScreensaver(): NO delay program (or stream) using sound card is running..."
        fi
    fi
    # disable screensaver if there are delay apps in fullscreen mode
    if LO_isFullScreenBeingUsed; then 
        LO_log "LO_delayScreensaver(): Delaying the screensaver because a Fullscreen delay program is running..."
        LO_disableScreensaver 
        return 0
    else
        LO_log "LO_delayScreensaver(): NO delay program (or stream) in Fullscreen mode is running..."
    fi
    # disable screensaver if we have significant ouput connections
    if LO_hasDelayOutputConns; then 
        LO_log "LO_delayScreensaver(): Delaying the screensaver because Output connections were found..."
        LO_disableScreensaver 
        return 0
    else
        LO_log "LO_delayScreensaver(): NO delay output connections detected..."
    fi

    LO_log "LO_delayScreensaver(): NO delay programs were detected for suspending screensaver..."

    # Since NO delay situations were detected we must enable screensaver if necessary
    local stt="$(LO_read_state)"
    LO_log "LO_delayScreensaver(): Current screensaver state = $stt "
    if [ "$stt" == "DISABLED" ]; then
        LO_enableScreensaver 
        LO_log "LO_delayScreensaver(): running screensaver ENABLED..."
        return 0
    fi
}

# sleep for the next iteration
function LO_sleep() {
    if [ $LO_enableDynDelay -eq 0 ]; then
        LO_log "LO_sleep(): sleeping for $LO_delay"
        LO_log "--------------- loop done! ---------------"
        snore "$LO_delay"
        return 0
    fi
    local LO_systemSleepDelay=""
    local LO_sleepDelay=""
    if [ $LO_mateScrSvrPresent -eq 1 ]; then
        if [ -f /sys/class/power_supply/ADP1/online ]; then
            if [ $LO_gsettingsPresent -eq 1 ]; then
                if [ "$( awk '{ print $0 }' /sys/class/power_supply/ADP1/online)" == "1" ]; then
                    LO_systemSleepDelay=$(gsettings get org.mate.power-manager sleep-display-ac 2>/dev/null)
                else
                    LO_systemSleepDelay=$(gsettings get org.mate.power-manager sleep-display-battery 2>/dev/null)
                fi
            fi
        fi
    elif [ $LO_gnomeScrSvrPresent -eq 1 ]; then
        if [ -f /sys/class/power_supply/ADP1/online ]; then
            if [ $LO_gsettingsPresent -eq 1 ]; then
                if [ "$( awk '{ print $0 }' /sys/class/power_supply/ADP1/online)" == "1" ]; then
                    LO_systemSleepDelay=$(gsettings get org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 2>/dev/null)
                else
                    LO_systemSleepDelay=$(gsettings get org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout 2>/dev/null)
                fi
            fi
        fi
    fi
    if [ "$(echo "$LO_systemSleepDelay" | egrep -c "^[0-9]+$")" == "1" ]; then
        if [ $LO_systemSleepDelay -le $(($LO_defaultSleepDelay+5)) ]; then
            LO_sleepDelay=$LO_defaultSleepDelay
        else
            LO_sleepDelay=$(($LO_systemSleepDelay-5))
        fi
    else
        LO_sleepDelay=$LO_defaultSleepDelay
    fi
    LO_log "LO_sleep(): sleeping for $LO_sleepDelay (system idle timeout is $LO_systemSleepDelay)"
    LO_log "--------------- loop done! ---------------"
    snore "$LO_sleepDelay"
}

# If we are using custom xautolock configs, we can kill all other screensavers daemons 
function LO_disableOtherSS() {
    stop_it "cinnamon-screensaver"
    stop_it "mate-screensaver"
    stop_it "gnome-screensaver"
    stop_it "xscreensaver"
    return 0
}

# check if an application is present and can be executed
function LO_isPresentAndExec() {
    [ -z "$1" ] && return 1
    local tmp="$(command -v "$1")"
    [ ! -z "$tmp" ] && [ -x "${tmp}" ] && return 0 || return 1
}

# required binaries that must be present in order to run
precheck "xset"
precheck "wmctrl"
precheck "xvinfo"
precheck "xprop"
precheck "xrandr"
precheck "bc"
precheck "xautolock"
precheck "pulseaudio"
precheck "awk"
precheck "grep"

# Enable use of dynamic delay via gsettings
LO_enableDynDelay=0
LO_delay=""

# This is actually the minimum allowed dynamic delay.
# Also the default (if everything else fails)
LO_defaultSleepDelay=150

# If passed argument is not integer quit.
if [ ! -z "$1" ]; then
    if [[ $1 = *[^0-9]* ]]; then
        LO_log "The Argument \"$1\" is not valid, not an integer."
        echo "The Argument \"$1\" is not valid, not an integer"
        echo "Please use the time in seconds you want the checks to repeat."
        echo "You want it to be ~10 seconds less than the time it takes your screensaver or DPMS to activate"
        exit 1
    else
        LO_delay=$1
    fi
elif [ $LO_enableDynDelay -eq 0 ]; then
    LO_delay=$LO_defaultSleepDelay
fi

# Check for screensaver apps on your system
LO_xautolockPresent=$(if LO_isPresentAndExec "xautolock"; then echo 1; else echo 0; fi)
LO_gsettingsPresent=$(if LO_isPresentAndExec "gsettings"; then echo 1; else echo 0; fi)
LO_xdgScrSvrPresent=$(if LO_isPresentAndExec "xdg-screensaver"; then echo 1; else echo 0; fi)
LO_mateScrSvrPresent=$(if LO_isPresentAndExec "mate-screensaver"; then echo 1; else echo 0; fi)
LO_gnomeScrSvrPresent=$(if LO_isPresentAndExec "gnome-screensaver"; then echo 1; else echo 0; fi)
LO_cinnamonScrSvrPresent=$(if LO_isPresentAndExec "cinnamon-screensaver"; then echo 1; else echo 0; fi)
LO_xScrSvrPresent=$(if LO_isPresentAndExec "xscreensaver"; then echo 1; else echo 0; fi)

# Search for a running screensaver program 
LO_screenSaverProgram=$(LO_whichScrSvrRunning)

# xautolock is default and also fallback option 

if [ -z "$LO_screenSaverProgram" ]; then
    [ $LO_xautolockPresent -eq 1 ] && LO_screenSaverProgram="xautolock"
fi

# If argument empty, use dynamic delay.
LO_systemSleepDelay=$LO_defaultSleepDelay
if [ -z "$LO_delay" ]; then
    LO_enableDynDelay=1
    LO_log "NO delay specified, dynamic delay activated"
fi

# config vars
LO_scriptName="${0##*/}"
LO_scriptBaseName="${LO_scriptName%%.*}"
LO_scriptFPath="$(dirname "$(readlink -f $0)")/${LO_scriptName}"
LO_defaultDisableTime="$(echo "2^7" | bc)"
LO_stateFile="/tmp/${LO_scriptBaseName}_${USER}_state.txt"

# enumerate all the attached screens
LO_displays=$(xvinfo | awk -F'#' '/^screen/ {print $2}' | xargs)

# Kill older instances of this job
kill_older

# clean LO_state file
LO_state_clean

# start-up LO_log messages
LO_log "[ START ] $LO_scriptName  "
LO_log "LO_stateFile............: $LO_stateFile"
LO_log "LO_scriptName...........: $LO_scriptName"
LO_log "LO_scriptFPath..........: $LO_scriptFPath"
LO_log "LO_defaultDisableTime...: $LO_defaultDisableTime"
LO_log "LO_defaultSleepDelay....: $LO_defaultSleepDelay"
LO_log "LO_enableDynDelay.......: $LO_enableDynDelay"
LO_log "LO_delay................: $LO_delay"
LO_log "LO_xautolockPresent.....: $LO_xautolockPresent"
LO_log "LO_gsettingsPresent.....: $LO_gsettingsPresent"
LO_log "LO_xdgScrSvrPresent.....: $LO_xdgScrSvrPresent"
LO_log "LO_mateScrSvrPresent....: $LO_mateScrSvrPresent"
LO_log "LO_gnomeScrSvrPresent...: $LO_gnomeScrSvrPresent"
LO_log "LO_cinnamonScrSvrPresent: $LO_cinnamonScrSvrPresent"
LO_log "LO_xScrSvrPresent.......: $LO_xScrSvrPresent"
LO_log "Original Screensaver detected = $LO_screenSaverProgram"

# Starting procedures for xautolock daemon
if [ "$LO_screenSaverProgram" = "xautolock" ]; then 
    LO_log "Starting xautolock daemon..."
    LO_enableScrXautolock "force"
fi

# Starting with ENABLED state
LO_log "Saving initial state = ENABLED"
LO_save_state "ENABLED"

# Initiate monitoring
while true; do
    #LO_screenSaverProgram=$(LO_whichScrSvrRunning)
    [ "$LO_screenSaverProgram" = "xautolock" ] && LO_disableOtherSS
    LO_delayScreensaver
    LO_sleep $LO_delay
done
exit 0
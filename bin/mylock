#!/usr/bin/env bash
# This script is intended to be run as the xautolock locker and notifier.
# It requires i3lock, and dunst is optional.
#set -eu

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

# config vars
ML_scriptName="${0##*/}"
ML_scriptBaseName="${ML_scriptName%%.*}"
ML_scriptFPath="$(dirname "$(readlink -f $0)")/${ML_scriptName}"
ML_lockFile="/tmp/${ML_scriptBaseName}_${USER}_$(timestamp).txt"

# Lock screen if possible.
function do_lock() {
    # Only works if X is running.
    ! is_running_X && log "X server is not running" && return 0
    
    # Already locked
    locked && return 0;

    #log "Locking screen now..."
    dunstctl stop
    # Fork both i3lock and its monitor to avoid blocking xautolock.
    # this must be the last command, and it must be 'non forking', as expected by 'xautolock'
    $HOME/bin/lock -n -gpf Comic-Sans-MS -- scrot &
    pid="$!"
    #log "Locked and Waiting until (screen lock) PID $pid ends up..."
    touch "$ML_lockFile"
    echo "LockPID=$pid" > "$ML_lockFile"
    while 2>/dev/null kill -0 "$pid"; do
        snore 1.2
    done
    [ -f "$ML_lockFile" ] && rm -f "$ML_lockFile"
    stop_it "i3lock"
    #log "Unlocked and resumed..."
    dunstctl resume
}

function do_test() {
    is_running_X && log "X is running" || log "X server down"
    locked "debug" && log "Screen already locked" || log "Screen not locked";
    pgrep -f dunst && log "dunst found" || log "dunst not found"
}

function main(){
    precheck "xset"
    precheck "i3lock"

    local cmd=${1:-lock}
    
    case "$cmd" in
        lock)
            trap 'rm -f "$ML_lockFile"; exit' INT TERM EXIT ERR
            do_lock
        ;;
        debug)
            do_test
        ;;
        *)
            log "Unrecognized option: $1"
    esac
    trap - INT TERM EXIT ERR
    exit 0
}

main "$@"

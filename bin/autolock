#!/usr/bin/env bash
set -u

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

function usage(){
    echo "Usage: ${0##*/} [commands]"
    echo "Purpose: Basic screen lock app"
    echo "       "
    echo "Commands"
    echo "  lock: Lock screen using system defaults"
    echo "notify: Send pre-lock otification"
    echo "   off: Off screen";
    echo
    return 0
}

function do_lock(){
    locked && exit 0
    ~/bin/lock -gpf Roboto & disown
    return 0
}

function do_notify(){
    # Notification should not be issued while locked even if dunst is paused.
    locked && exit 0
    # grep finds either Xautolock.notify or Xautolock*notify
    secs="$(xrdb -query | grep -m1 '^Xautolock.notify' | cut -f2)"
    test -n "$secs" && secs="Locking in $secs seconds"
    notify-send --urgency="normal" --app-name="xautolock" --icon="$(iconPath system-lock-screen)" -- "Screen Lock" "$secs"
    return 0
}

function main(){
    precheck "xset"
    precheck "i3lock"
    
    # This script is intended to be run as the xautolock locker and notifier.
    # It requires i3lock, and dunst is optional.
    
    # Copy or link this script as /usr/bin/slock to let xfce4-session run it.
    if [ "$(basename "$0")" = "slock" ]; then
        cmd=lock
    else
        cmd=${1:-lock}
    fi
    
    case "$cmd" in
        lock)
            do_lock
        ;;
        notify)
            do_notify
        ;;
        off)
            # if "off" is given as parameter, then spawn a new thread to turn off the screen
            snore 2 && xset dpms force off &
        ;;
        *)
            usage;
            log "Unrecognized option: $1"
        ;;
    esac
    exit 0
}

main "$@"

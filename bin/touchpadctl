#!/bin/sh
## $1 = "add" / "remove"
## $2 = %k from udev
#set -eu

usage() {
    echo "Usage: $(basename $0) [Options]"
    echo "       "
    echo "Purpose: To enable or disable Touchpad"
    echo "       "
    echo "Options"
    echo "-a | --auto : Disable/enable touchpad depending on other pointer attach"
    echo "-h | --help : Show this help"
    echo "-d | --disable: Disable touchpad"
    echo "-e | --enable: Enable touchpad"
    return 0;
}

touch_hnd_noX(){
    local base_dir="/sys/bus/serio/drivers/psmouse"
    local device_id="serio1"
    local dmode=""

    [ -f $base_dir/bind_mode ] || /usr/bin/logger -t Touchpadctl -- "Cannot enable touchpad - not found" && return 0

    case "$1" in
        -a | --auto )
            dmode="`/bin/cat $base_dir/bind_mode`"
            if [ "$dmode" = "manual" ]; then
                echo -n auto > $base_dir/bind_mode && /usr/bin/logger -t Touchpadctl -- "Enabling the touchpad" || /usr/bin/logger -t Touchpadctl -- "Cannot enable touchpad"
                echo -n $device_id > $base_dir/bind 2>/dev/null || true
            else
                echo -n manual > $base_dir/bind_mode && /usr/bin/logger -t Touchpadctl -- "Disabling the touchpad" || /usr/bin/logger -t Touchpadctl -- "Cannot disable touchpad"
                echo -n $device_id > $base_dir/unbind 2>/dev/null || true
            fi
        ;;
        -d | --disable)
            echo -n manual > $base_dir/bind_mode && /usr/bin/logger -t Touchpadctl -- "Disabling the touchpad" || /usr/bin/logger -t Touchpadctl -- "Cannot disable touchpad"
            echo -n $device_id > $base_dir/unbind 2>/dev/null || true
        ;;
        -e | --enable)
            echo -n auto > $base_dir/bind_mode && /usr/bin/logger -t Touchpadctl -- "Enabling the touchpad" || /usr/bin/logger -t Touchpadctl -- "Cannot enable touchpad"
            echo -n $device_id > $base_dir/bind 2>/dev/null || true
        ;;
        *)  usage
            exit 0
        ;;
    esac
}

xinput_disable_touch(){
    local t_id=$1
    local t_st=$2
    local usr=$3
    
    if [ $t_st -ne 0 ]; then
        /usr/bin/xinput disable $t_id && /usr/bin/logger -t Touchpadctl -- "Disabling touchpad for $usr. ($XAUTHORITY - $DISPLAY)" && return 0
        /usr/bin/logger -t Touchpadctl -- "Error in xinput while disabling touchpad for $usr. ($XAUTHORITY - $DISPLAY)"
    else
        /usr/bin/logger -t Touchpadctl -- "Touchpad already disabled for $usr. ($XAUTHORITY - $DISPLAY)"
    fi
}

xinput_enable_touch(){
    local t_id=$1
    local t_st=$2
    local usr=$3
    
    if [ $t_st -eq 0 ]; then
        /usr/bin/xinput enable $t_id && /usr/bin/logger -t Touchpadctl -- "Enabling touchpad for $usr. ($XAUTHORITY - $DISPLAY)" && return 0
        /usr/bin/logger -t Touchpadctl -- "Error using in xinput while enabling touchpad for $usr. ($XAUTHORITY - $DISPLAY)"
    else
        /usr/bin/logger -t Touchpadctl -- "Touchpad already enabled for $usr. ($XAUTHORITY - $DISPLAY)"
    fi
}

touch_hnd_X(){
    local usr="$2"
    local touch_id=0
    local touch_stt=0
    local mouse_id=0
    local mouse_stt=0
    
    /usr/bin/logger -t Touchpadctl -- "hnd_X with option $1 and usr=$usr"
    
    touch_id="`/usr/bin/xinput list | \egrep -iEo 'Touchpad\s*id\=[0-9]{1,2}' | \egrep -Eo '[0-9]{1,2}'`"
    [ $? -ne 0 ] && touch_id=0 && /usr/bin/logger -t Touchpadctl -- "Touchpad device not found. $usr. ($XAUTHORITY - $DISPLAY)" && return 0
    touch_stt="`/usr/bin/xinput list-props $touch_id | \grep 'Device Enabled' | \awk '{print $4}'`"
    [ $? -ne 0 ] && touch_stt=0
    
    case "$1" in
        -a | --auto )
            mouse_id="`xinput list | grep -iv 'touchpad\|control\|virtual core\|core XTEST' | grep 'slave  pointer' | \egrep -iEo '*id\=[0-9]{1,2}' | \egrep -Eo '[0-9]{1,2}' | tail -n1`"
            [ $? -ne 0 ] && mouse_id=0 && /usr/bin/logger -t Touchpadctl -- "Mouse/Pointer device not found. $usr. ($XAUTHORITY - $DISPLAY)" && return 0
            mouse_stt="`/usr/bin/xinput list-props $mouse_id | \grep 'Device Enabled' | \awk '{print $4}'`"
            [ $? -ne 0 ] && mouse_stt=0
            if [ $mouse_id -ne 0 ] && [ $mouse_stt -ne 0 ]; then
                xinput_disable_touch "$touch_id" "$touch_stt" "$usr"
            else
                xinput_enable_touch "$touch_id" "$touch_stt" "$usr"
            fi
        ;;
        -d | --disable )
            xinput_disable_touch "$touch_id" "$touch_stt" "$usr"
        ;;
        -e | --enable )
            xinput_enable_touch "$touch_id" "$touch_stt" "$usr"
        ;;
        *)  usage
            exit 0
        ;;
    esac
}

main(){
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi
    
    local user_list
    local user_id
    
    user_list="`w -h | cut -d' ' -f1 | sort | uniq`"
    user_id="`id -u`"
    
    # Check running X
    if command -v xset >/dev/null 2>&1 && xset q >/dev/null 2>&1; then
        /usr/bin/logger -t Touchpadctl -- "Xserver is running."
    else
        /usr/bin/logger -t Touchpadctl -- "Xserver is not running."
        if [ $user_id -eq 0 ]; then
            /usr/bin/logger -t Touchpadctl -- "User: root to perform manual override on driver settings."
            touch_hnd_noX "$1" "root"
            exit 0
        fi
        return 0
    fi
    
    if [ $user_id -eq 0 ]; then
        /usr/bin/logger -t Touchpadctl -- "User: root to perform xinput."
        touch_hnd_X "$1" "root"
        exit 0
    fi
    
    for u in ${user_list}; do
        ## Can't find a way to get another users DISPLAY variable from an isolated root environment. Have to set it manually.
        displ="`sudo -Hiu "${u}" env | grep -e "^DISPLAY=" | cut -d'=' -f2`"
        [ -z "$displ" ] && displ=":0"
        export XAUTHORITY="`sudo -Hiu "${u}" env | grep -e "^HOME=" | cut -d'=' -f2`/.Xauthority"
        export DISPLAY="${displ}"
        if [ -f "${XAUTHORITY}" ]; then
            /usr/bin/logger -t Touchpadctl -- "User: $u to perform xinput."
            touch_hnd_X "$1" "$u"
        fi
    done
}

main "$@"

#!/usr/bin/env bash
# rofi based mpd control app

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

#when set to exit, mpd_control will exit if you press escape
#when set to break, mpd_control will go the upper level if possible
ESC_ACTION="break"
# source configuration file for rofi if exists

ROFI="rofi -location 2 -dmenu -l 20 -line-margin 0 -line-padding 1 -i -p Search:"
declare -i MPD_PORT
MPD_PORT=$(grep "port" $HOME/.config/mpd/mpd.conf | grep -v "#" | sed -e 's/\"//g' | awk '/port/ {print $2}')

function addaftercurrent(){
    #playlist is empty, just add the song
    if [ "$(mpc -p $MPD_PORT playlist | wc -l)" == "0" ]; then
        mpc -p $MPD_PORT add "$1"
        #there is no current song so mpd is stopped
        #it seems to be impossible to determine the current songs' position when
        #mpd is stopped, so just add to the end
    elif [ -z "$(mpc -p $MPD_PORT current)" ]; then
        mpc -p $MPD_PORT play
        CUR_POS=$(mpc -p $MPD_PORT  | tail -2 | head -1 | awk '{print $2}' | sed 's/#//' | awk -F/ '{print $1}')
        END_POS=$(mpc -p $MPD_PORT playlist | wc -l)
        mpc -p $MPD_PORT add "$1"
        mpc -p $MPD_PORT move $(($END_POS+1)) $(($CUR_POS+1))
        mpc -p $MPD_PORT stop
        #at least 1 song is in the playlist, determine the position of the
        #currently played song and add $1 after it
    else
        CUR_POS=$(mpc -p $MPD_PORT  | tail -2 | head -1 | awk '{print $2}' | sed 's/#//' | awk -F/ '{print $1}')
        END_POS=$(mpc -p $MPD_PORT playlist | wc -l)
        mpc -p $MPD_PORT add "$1"
        mpc -p $MPD_PORT move $(($END_POS+1)) $(($CUR_POS+1))
    fi
}

function addaftercurrentandplay(){
    #playlist is empty, just add the song
    if [ "$(mpc -p $MPD_PORT playlist | wc -l)" == "0" ]; then
        mpc -p $MPD_PORT add "$1"
        mpc -p $MPD_PORT play
        #there is no current song so mpd is stopped
        #it seems to be impossible to determine the current songs' position when
        #mpd is stopped, so just add to the end
    elif [ -z "$(mpc -p $MPD_PORT current)" ]; then
        mpc -p $MPD_PORTplay
        CUR_POS=$(mpc -p $MPD_PORT  | tail -2 | head -1 | awk '{print $2}' | sed 's/#//' | awk -F/ '{print $1}')
        END_POS=$(mpc -p $MPD_PORT playlist | wc -l)
        mpc -p $MPD_PORT add "$1"
        mpc -p $MPD_PORT move $(($END_POS+1)) $(($CUR_POS+1))
        mpc -p $MPD_PORT play $(($CUR_POS+1))
        #at least 1 song is in the playlist, determine the position of the
        #currently played song and add $1 after it
    else
        CUR_POS=$(mpc -p $MPD_PORT | tail -2 | head -1 | awk '{print $2}' | sed 's/#//' | awk -F/ '{print $1}')
        END_POS=$(mpc -p $MPD_PORT playlist | wc -l)
        mpc -p $MPD_PORT add "$1"
        mpc -p $MPD_PORT move $(($END_POS+1)) $(($CUR_POS+1))
        mpc -p $MPD_PORT play $(($CUR_POS+1))
    fi
}

precheck "mpd"
precheck "mpc"
precheck "rofi"

case $1 in
    -a|--artist)
        while true; do
            ARTIST="$(mpc -p $MPD_PORT list artist | sort -f | $ROFI)";
            [ "$ARTIST" = "" ] && $ESC_ACTION
            while true; do
                ALBUMS=$(mpc -p $MPD_PORT list album artist "$ARTIST" | sort -f);
                ALBUM=$(echo -e "replace all\nadd all\n--------------------------\n$ALBUMS" | $ROFI);
                if [ "$ALBUM" = "" ]; then 
                    $ESC_ACTION;
                elif [ "$ALBUM" = "replace all" ]; then
                    CUR_SONG=$(mpc -p $MPD_PORT current)
                    mpc -p $MPD_PORT clear
                    mpc -p $MPD_PORT find artist "$ARTIST" | mpc -p $MPD_PORT add
                    [ -n "$CUR_SONG" ] && mpc -p $MPD_PORT  play
                    $ESC_ACTION
                elif [ "$ALBUM" = "add all" ]; then
                    mpc -p $MPD_PORT find artist "$ARTIST" | mpc -p $MPD_PORT add
                    $ESC_ACTION
                fi
                
                while true; do
                    TITLES=$(mpc -p $MPD_PORT list title artist "$ARTIST" album "$ALBUM")
                    TITLE=$(echo -e "replace all\nadd all\n--------------------------\n$TITLES" | $ROFI);
                    if [ "$TITLE" = "" ]; then 
                        $ESC_ACTION
                    elif [ "$TITLE" = "replace all" ]; then
                        CUR_SONG=$(mpc -p $MPD_PORT current)
                        mpc -p $MPD_PORT clear;
                        mpc -p $MPD_PORT find artist "$ARTIST" album "$ALBUM" | mpc -p $MPD_PORT add
                        [ -n "$CUR_SONG" ] && mpc -p $MPD_PORT play
                        $ESC_ACTION
                    elif [ "$TITLE" = "add all" ]; then
                        mpc -p $MPD_PORT find artist "$ARTIST" album "$ALBUM" | mpc -p $MPD_PORT add
                        $ESC_ACTION
                    fi
                    
                    while true; do
                        DEC=$(echo -e "add after current and play\nadd after current\nreplace\nadd at the end" | $ROFI);
                        case $DEC in
                            "add after current and play")
                                addaftercurrentandplay "$(mpc -p $MPD_PORT find artist "$ARTIST" album "$ALBUM" title "$TITLE" | head -1 )"
                            ;;
                            "add after current")
                                addaftercurrent "$(mpc -p $MPD_PORT find artist "$ARTIST" album "$ALBUM" title "$TITLE" | head -1 )"
                            ;;
                            "replace")
                                CUR_SONG=$(mpc -p $MPD_PORT current)
                                mpc -p $MPD_PORT clear
                                mpc -p $MPD_PORT find artist "$ARTIST" album "$ALBUM" title "$TITLE" | head -1 | mpc -p $MPD_PORT add
                                if [ -n "$CUR_SONG" ]; then mpc -p $MPD_PORT play; fi
                            ;;
                            "add at the end")
                                mpc -p $MPD_PORT find artist "$ARTIST" album "$ALBUM" title "$TITLE" | head -1 | mpc -p $MPD_PORT add
                            ;;
                        esac
                        $ESC_ACTION
                    done
                done
            done
        done
    ;;
    
    -t|--track)
        TITLE=$(mpc -p $MPD_PORT list title | sort -f | $ROFI)
        if [ "$TITLE" = "" ]; then exit; fi
        SONG=$(mpc -p $MPD_PORT find title "$TITLE" | head -1)
        addaftercurrentandplay "$SONG"
    ;;
    
    -p|--playlist)
        PLAYLIST=$(mpc -p $MPD_PORT lsplaylists | $ROFI)
        [ "$PLAYLIST" = "" ] && exit
        CUR_SONG=$(mpc -p $MPD_PORT current)
        mpc -p $MPD_PORT clear
        mpc -p $MPD_PORT load "$PLAYLIST";
        [ -n "$CUR_SONG" ] && mpc -p $MPD_PORT play
    ;;
    
    -j|--jump)
        TITLE=$(mpc -p $MPD_PORT playlist | $ROFI);
        [ "$TITLE" = "" ] && exit
        POS=$(mpc -p $MPD_PORT playlist | grep -n "$TITLE" | awk -F: '{print $1}')
        mpc -p $MPD_PORT play $POS;
    ;;
    
    -l|--longplayer)
        while true; do
            ALBUM=$(mpc -p $MPD_PORT list album | sort -f | $ROFI);
            [ "$ALBUM" = "" ] && $ESC_ACTION            
            while true; do
                TITLES=$(mpc -p $MPD_PORT list title album "$ALBUM")
                TITLE=$(echo -e "replace all\nadd all\n--------------------------\n$TITLES" | $ROFI);
                if [ "$TITLE" = "" ]; then 
                    $ESC_ACTION
                elif [ "$TITLE" = "replace all" ]; then
                    CUR_SONG=$(mpc -p $MPD_PORT current)
                    mpc -p $MPD_PORT clear;
                    mpc -p $MPD_PORT find album "$ALBUM" | mpc -p $MPD_PORT add
                    [ -n "$CUR_SONG" ] && mpc -p $MPD_PORT play
                    $ESC_ACTION
                elif [ "$TITLE" = "add all" ]; then
                    mpc -p $MPD_PORT find album "$ALBUM" | mpc -p $MPD_PORT add
                    $ESC_ACTION
                fi
                
                while true; do
                    DEC=$(echo -e "add after current and play\nadd after current\nreplace\nadd at the end" | $ROFI);
                    case $DEC in
                        "add after current and play")
                            addaftercurrentandplay "$(mpc -p $MPD_PORT find album "$ALBUM" title "$TITLE" | head -1 )"
                        ;;
                        "add after current")
                            addaftercurrent "$(mpc -p $MPD_PORT find album "$ALBUM" title "$TITLE" | head -1 )"
                        ;;
                        "replace")
                            CUR_SONG=$(mpc -p $MPD_PORT current)
                            mpc -p $MPD_PORT clear
                            mpc -p $MPD_PORT find album "$ALBUM" title "$TITLE" | head -1 | mpc -p $MPD_PORT add
                            if [ -n "$CUR_SONG" ]; then mpc -p $MPD_PORT play; fi
                        ;;
                        "add at the end")
                            mpc -p $MPD_PORT find album "$ALBUM" title "$TITLE" | head -1 | mpc -p $MPD_PORT add
                        ;;
                    esac
                    $ESC_ACTION
                done
            done
        done
    ;;
    
    -h|--help)
        echo "-a, --artist      search for artist, then album, then title"
        echo "-t, --track       search for a single track in the whole database"
        echo "-p, --playlist        search for a playlist load it"
        echo "-j, --jump        jump to another song in the current playlist"
        echo "-l, --longplayer  search for album, then title"
    ;;
    *)
        echo "Usage: rofi-mpd [OPTION]"
        echo "Try 'rofi-mpd --help' for more information."
    ;;
esac

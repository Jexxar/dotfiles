#!/usr/bin/env bash
# This script is intended to be run as the main suspend script for this installation.
set -u

if [ -f "$HOME/bin/mycommon" ]; then
    . "$HOME/bin/mycommon"
fi

function do_suspend() {
    local clogind=(
    "loginctl suspend"
    "$HOME/bin/mylock"    
    )
    local csystemd=(
    "sudo systemctl suspend"
    "$HOME/bin/mylock"
    )
    local cpmsuspend=(
    "sudo pm-suspend"
    "$HOME/bin/mylock"
    )
    local czzz=(
    "sudo zzz"
    "$HOME/bin/mylock"
    )
    # sudoers permissions
    local su_no_pw="$(sudo -l | grep "NOPASSWD")"
    if is_running_X ; then
        #log "is_running_X"
        if ! locked; then
            #log "not locked"
            if [[ $su_no_pw == *"systemctl"* ]]; then
                #log "systemctl choose"
                checkfor "systemctl" && {
                    sudo systemctl suspend && "$HOME"/bin/mylock && exit 0
                    checkfor "parallel" && parallel --will-cite --jobs 2 ::: "${csystemd[@]}" && exit 0
                    checkfor "xargs" && printf "%s\n"  "${csystemd[@]}" | xargs -I {} -P 2 sh -c "{}"
                    exit 0;
                }
            fi
            if [[ $su_no_pw == *"pm-suspend"* ]]; then
                #log "pm-suspend choose"
                checkfor "pm-suspend" && {
                    checkfor "parallel" && parallel --will-cite --jobs 2 ::: "${cpmsuspend[@]}" && exit 0
                    checkfor "xargs" && printf "%s\n"  "${cpmsuspend[@]}" | xargs -I {} -P 2 sh -c "{}"
                    exit 0;
                }
            fi
            if [[ $su_no_pw == *"zzz"* ]]; then
                #log "zzz choose"
                checkfor "zzz" && {
                    checkfor "parallel" && parallel --will-cite --jobs 2 ::: "${czzz[@]}" && exit 0
                    checkfor "xargs" && printf "%s\n"  "${czzz[@]}" | xargs -I {} -P 2 sh -c "{}"
                    exit 0;
                }
            fi
            if can_suspend; then
                dbus_suspend && "$HOME/bin/mylock" && exit 0
            fi
            # try elogind version
            if is_session_active && checkfor "loginctl"; then
                #log "loginctl choose"
                checkfor "parallel" && parallel --will-cite --jobs 2 ::: "${clogind[@]}" && exit 0
                checkfor "xargs" && printf "%s\n"  "${clogind[@]}" | xargs -I {} -P 2 sh -c "{}"
                exit 0;
            fi
        fi
        # try for dbus freedesktop service to interact with logind
        can_suspend && dbus_suspend && exit 0
        # try elogind version
        is_session_active && checkfor "loginctl" && loginctl suspend && exit 0
    fi
    # make sure systemctl suspend is in sudoers file
    [[ $su_no_pw == *"systemctl"* ]] && checkfor "systemctl" && sudo systemctl suspend && exit 0
    # make sure pm-suspend is in sudoers file
    [[ $su_no_pw == *"pm-suspend"* ]] && checkfor "pm-suspend" && sudo pm-suspend && exit 0
    # make sure zzz is in sudoers file
    [[ $su_no_pw == *"zzz"* ]] && checkfor "zzz" && sudo zzz && exit 0
    log "No suitable suspend command found. Check your installation." && exit 0
}

function do_test() {
    if is_running_X ; then
        log "X is running"
        if is_session_active; then
            log "User $USER has an active polkit session"
            checkfor "loginctl" && {
                if loginctl -h | grep -q "suspend"; then
                    log "loginctl allowed to suspend"
                else
                    log "loginctl not allowed to suspend"
                fi
            }
            can_suspend && log "User $USER can suspend using Dbus"
        else
            log "User $USER does NOT have an active session"
        fi
    fi
    local su_no_pw="$(sudo -l | grep "NOPASSWD")"
    [[ $su_no_pw == *"systemctl"* ]] && checkfor "systemctl" && log "Found: sudo systemctl suspend"
    [[ $su_no_pw == *"pm-suspend"* ]] && checkfor "pm-suspend" && log "Found: sudo pm-suspend"
    [[ $su_no_pw == *"zzz"* ]] && checkfor "zzz" && log "Found: sudo zzz"
    return 0
}

function main(){
    local cmd=${1:-suspend}
    
    case "$cmd" in
        suspend)
            do_suspend
        ;;
        debug)
            do_test
        ;;
        *)
            log "Unrecognized option: $1"
    esac
}

main "$@"
